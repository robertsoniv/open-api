openapi: 3.0.0
info:
  title: OrderCloud
  description: 'OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It''s designed to be used as the backend component with various other integrations and services.'
  version: 1.0.89
  contact:
    name: OrderCloud
    url: 'http://ordercloud.io'
    email: ordercloud@four51.com
servers:
  - url: 'https://api.ordercloud.io/v1'
    description: Main API Server (OrderCloud resources requiring an access token)
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://auth.ordercloud.io/oauth/token'
          scopes:
            AddressAdmin: ''
            AddressReader: ''
            AdminAddressAdmin: ''
            AdminAddressReader: ''
            AdminUserAdmin: ''
            AdminUserGroupAdmin: ''
            AdminUserGroupReader: ''
            AdminUserReader: ''
            ApiClientAdmin: ''
            ApiClientReader: ''
            ApprovalRuleAdmin: ''
            ApprovalRuleReader: ''
            BuyerAdmin: ''
            BuyerImpersonation: ''
            BuyerReader: ''
            BuyerUserAdmin: ''
            BuyerUserReader: ''
            CatalogAdmin: ''
            CatalogReader: ''
            CategoryAdmin: ''
            CategoryReader: ''
            CostCenterAdmin: ''
            CostCenterReader: ''
            CreditCardAdmin: ''
            CreditCardReader: ''
            FullAccess: ''
            GrantForAnyRole: ''
            IncrementorAdmin: ''
            IncrementorReader: ''
            InventoryAdmin: ''
            MeAddressAdmin: ''
            MeAdmin: ''
            MeCreditCardAdmin: ''
            MessageConfigAssignmentAdmin: ''
            MeXpAdmin: ''
            OrderAdmin: ''
            OrderReader: ''
            OverrideShipping: ''
            OverrideTax: ''
            OverrideUnitPrice: ''
            PasswordReset: ''
            PriceScheduleAdmin: ''
            PriceScheduleReader: ''
            ProductAdmin: ''
            ProductAssignmentAdmin: ''
            ProductFacetAdmin: ''
            ProductFacetReader: ''
            ProductReader: ''
            PromotionAdmin: ''
            PromotionReader: ''
            SetSecurityProfile: ''
            ShipmentAdmin: ''
            ShipmentReader: ''
            Shopper: ''
            SpendingAccountAdmin: ''
            SpendingAccountReader: ''
            SupplierAddressAdmin: ''
            SupplierAddressReader: ''
            SupplierAdmin: ''
            SupplierReader: ''
            SupplierUserAdmin: ''
            SupplierUserGroupAdmin: ''
            SupplierUserGroupReader: ''
            SupplierUserReader: ''
            UnsubmittedOrderReader: ''
            UserGroupAdmin: ''
            UserGroupReader: ''
        clientCredentials:
          tokenUrl: 'https://auth.ordercloud.io/oauth/token'
          scopes:
            AddressAdmin: ''
            AddressReader: ''
            AdminAddressAdmin: ''
            AdminAddressReader: ''
            AdminUserAdmin: ''
            AdminUserGroupAdmin: ''
            AdminUserGroupReader: ''
            AdminUserReader: ''
            ApiClientAdmin: ''
            ApiClientReader: ''
            ApprovalRuleAdmin: ''
            ApprovalRuleReader: ''
            BuyerAdmin: ''
            BuyerImpersonation: ''
            BuyerReader: ''
            BuyerUserAdmin: ''
            BuyerUserReader: ''
            CatalogAdmin: ''
            CatalogReader: ''
            CategoryAdmin: ''
            CategoryReader: ''
            CostCenterAdmin: ''
            CostCenterReader: ''
            CreditCardAdmin: ''
            CreditCardReader: ''
            FullAccess: ''
            GrantForAnyRole: ''
            IncrementorAdmin: ''
            IncrementorReader: ''
            InventoryAdmin: ''
            MeAddressAdmin: ''
            MeAdmin: ''
            MeCreditCardAdmin: ''
            MessageConfigAssignmentAdmin: ''
            MeXpAdmin: ''
            OrderAdmin: ''
            OrderReader: ''
            OverrideShipping: ''
            OverrideTax: ''
            OverrideUnitPrice: ''
            PasswordReset: ''
            PriceScheduleAdmin: ''
            PriceScheduleReader: ''
            ProductAdmin: ''
            ProductAssignmentAdmin: ''
            ProductFacetAdmin: ''
            ProductFacetReader: ''
            ProductReader: ''
            PromotionAdmin: ''
            PromotionReader: ''
            SetSecurityProfile: ''
            ShipmentAdmin: ''
            ShipmentReader: ''
            Shopper: ''
            SpendingAccountAdmin: ''
            SpendingAccountReader: ''
            SupplierAddressAdmin: ''
            SupplierAddressReader: ''
            SupplierAdmin: ''
            SupplierReader: ''
            SupplierUserAdmin: ''
            SupplierUserGroupAdmin: ''
            SupplierUserGroupReader: ''
            SupplierUserReader: ''
            UnsubmittedOrderReader: ''
            UserGroupAdmin: ''
            UserGroupReader: ''
  schemas:
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        token_type:
          type: string
        refresh_token:
          type: string
    Address:
      type: object
      properties:
        ID:
          type: string
        DateCreated:
          type: string
        CompanyName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        Zip:
          type: string
        Country:
          type: string
        Phone:
          type: string
        AddressName:
          type: string
        xp:
          type: object
    AddressAssignment:
      type: object
      properties:
        AddressID:
          type: string
        UserID:
          type: string
        UserGroupID:
          type: string
        IsShipping:
          type: boolean
        IsBilling:
          type: boolean
    ApiClient:
      type: object
      properties:
        ID:
          type: string
        ClientSecret:
          type: string
        AccessTokenDuration:
          type: integer
        Active:
          type: boolean
        AppName:
          type: string
        RefreshTokenDuration:
          type: integer
        DefaultContextUserName:
          type: string
        xp:
          type: object
        AllowAnyBuyer:
          type: boolean
        AllowAnySupplier:
          type: boolean
        AllowSeller:
          type: boolean
        IsAnonBuyer:
          type: boolean
        AssignedBuyerCount:
          type: integer
        AssignedSupplierCount:
          type: integer
    ApiClientAssignment:
      type: object
      properties:
        ApiClientID:
          type: string
        BuyerID:
          type: string
        SupplierID:
          type: string
    ApprovalRule:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        ApprovingGroupID:
          type: string
        RuleExpression:
          type: string
        xp:
          type: object
    Buyer:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        DefaultCatalogID:
          type: string
        Active:
          type: boolean
        xp:
          type: object
    BuyerAddress:
      type: object
      properties:
        ID:
          type: string
        Shipping:
          type: boolean
        Billing:
          type: boolean
        Editable:
          type: boolean
        DateCreated:
          type: string
        CompanyName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        Zip:
          type: string
        Country:
          type: string
        Phone:
          type: string
        AddressName:
          type: string
        xp:
          type: object
    BuyerCreditCard:
      type: object
      properties:
        ID:
          type: string
        Editable:
          type: boolean
        Token:
          type: string
        DateCreated:
          type: string
        CardType:
          type: string
        PartialAccountNumber:
          type: string
        CardholderName:
          type: string
        ExpirationDate:
          type: string
        xp:
          type: object
    BuyerProduct:
      type: object
      properties:
        PriceSchedule:
          $ref: '#/components/schemas/PriceSchedule'
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        QuantityMultiplier:
          type: integer
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        Active:
          type: boolean
        SpecCount:
          type: integer
        xp:
          type: object
        VariantCount:
          type: integer
        ShipFromAddressID:
          type: string
        Inventory:
          $ref: '#/components/schemas/Inventory'
        DefaultSupplierID:
          type: string
    BuyerSpec:
      type: object
      properties:
        Options:
          type: array
          items:
            $ref: '#/components/schemas/SpecOption'
        ID:
          type: string
        ListOrder:
          type: integer
        Name:
          type: string
        DefaultValue:
          type: string
        Required:
          type: boolean
        AllowOpenText:
          type: boolean
        DefaultOptionID:
          type: string
        DefinesVariant:
          type: boolean
        xp:
          type: object
    Catalog:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        CategoryCount:
          type: integer
        xp:
          type: object
    CatalogAssignment:
      type: object
      properties:
        CatalogID:
          type: string
        BuyerID:
          type: string
        ViewAllCategories:
          type: boolean
        ViewAllProducts:
          type: boolean
    Category:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        ListOrder:
          type: integer
        Active:
          type: boolean
        ParentID:
          type: string
        ChildCount:
          type: integer
        xp:
          type: object
    CategoryAssignment:
      type: object
      properties:
        CategoryID:
          type: string
        BuyerID:
          type: string
        UserGroupID:
          type: string
        Visible:
          type: boolean
        ViewAllProducts:
          type: boolean
    CategoryProductAssignment:
      type: object
      properties:
        CategoryID:
          type: string
        ProductID:
          type: string
        ListOrder:
          type: integer
    CostCenter:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        xp:
          type: object
    CostCenterAssignment:
      type: object
      properties:
        CostCenterID:
          type: string
        UserGroupID:
          type: string
    CreditCard:
      type: object
      properties:
        ID:
          type: string
        Token:
          type: string
        DateCreated:
          type: string
        CardType:
          type: string
        PartialAccountNumber:
          type: string
        CardholderName:
          type: string
        ExpirationDate:
          type: string
        xp:
          type: object
    CreditCardAssignment:
      type: object
      properties:
        CreditCardID:
          type: string
        UserID:
          type: string
        UserGroupID:
          type: string
    ImpersonateTokenRequest:
      type: object
      properties:
        ClientID:
          type: string
        Roles:
          type: array
          items:
            type: string
    ImpersonationConfig:
      type: object
      properties:
        ID:
          type: string
        ImpersonationBuyerID:
          type: string
        ImpersonationGroupID:
          type: string
        ImpersonationUserID:
          type: string
        BuyerID:
          type: string
        GroupID:
          type: string
        UserID:
          type: string
        SecurityProfileID:
          type: string
        ClientID:
          type: string
    Incrementor:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        LastNumber:
          type: integer
        LeftPaddingCount:
          type: integer
    Inventory:
      type: object
      properties:
        Enabled:
          type: boolean
        NotificationPoint:
          type: integer
        VariantLevelTracking:
          type: boolean
        OrderCanExceed:
          type: boolean
        QuantityAvailable:
          type: integer
        LastUpdated:
          type: string
    LineItem:
      type: object
      properties:
        ID:
          type: string
        ProductID:
          type: string
        Quantity:
          type: integer
        DateAdded:
          type: string
        QuantityShipped:
          type: integer
        UnitPrice:
          type: number
        LineTotal:
          type: number
        CostCenter:
          type: string
        DateNeeded:
          type: string
        ShippingAccount:
          type: string
        ShippingAddressID:
          type: string
        ShipFromAddressID:
          type: string
        Product:
          $ref: '#/components/schemas/LineItemProduct'
        Variant:
          $ref: '#/components/schemas/LineItemVariant'
        ShippingAddress:
          $ref: '#/components/schemas/Address'
        ShipFromAddress:
          $ref: '#/components/schemas/Address'
        SupplierID:
          type: string
        Specs:
          type: array
          items:
            $ref: '#/components/schemas/LineItemSpec'
        xp:
          type: object
    LineItemProduct:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        QuantityMultiplier:
          type: integer
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        xp:
          type: object
    LineItemSpec:
      type: object
      properties:
        SpecID:
          type: string
        Name:
          type: string
        OptionID:
          type: string
        Value:
          type: string
    LineItemVariant:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        xp:
          type: object
    ListAddress:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListAddressAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/AddressAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListApiClient:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ApiClient'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListApiClientAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ApiClientAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListApprovalRule:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalRule'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListBuyer:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Buyer'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListBuyerAddress:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/BuyerAddress'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListBuyerCreditCard:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/BuyerCreditCard'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListBuyerProduct:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/BuyerProduct'
        Meta:
          $ref: '#/components/schemas/MetaWithFacets'
    ListBuyerSpec:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/BuyerSpec'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCatalog:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Catalog'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCatalogAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CatalogAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCategory:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCategoryAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CategoryAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCategoryProductAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CategoryProductAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCostCenter:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CostCenter'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCostCenterAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CostCenterAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCreditCard:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CreditCard'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListCreditCardAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/CreditCardAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListFacet:
      type: object
      properties:
        Name:
          type: string
        XpPath:
          type: string
        Values:
          type: array
          items:
            $ref: '#/components/schemas/ListFacetValue'
        xp:
          type: object
    ListFacetValue:
      type: object
      properties:
        Value:
          type: string
        Count:
          type: integer
    ListImpersonationConfig:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ImpersonationConfig'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListIncrementor:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Incrementor'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListLineItem:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListMessageCCListenerAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/MessageCCListenerAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListMessageSender:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/MessageSender'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListMessageSenderAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/MessageSenderAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListOrder:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListOrderApproval:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/OrderApproval'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListOrderPromotion:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/OrderPromotion'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListPayment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListPriceSchedule:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/PriceSchedule'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListProduct:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListProductAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ProductAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListProductCatalogAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ProductCatalogAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListProductFacet:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ProductFacet'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListPromotion:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Promotion'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListPromotionAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/PromotionAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSecurityProfile:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/SecurityProfile'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSecurityProfileAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/SecurityProfileAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListShipment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Shipment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListShipmentItem:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/ShipmentItem'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSpec:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Spec'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSpecOption:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/SpecOption'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSpecProductAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/SpecProductAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSpendingAccount:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/SpendingAccount'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSpendingAccountAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/SpendingAccountAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListSupplier:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Supplier'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListUser:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListUserGroup:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListUserGroupAssignment:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupAssignment'
        Meta:
          $ref: '#/components/schemas/Meta'
    ListVariant:
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        Meta:
          $ref: '#/components/schemas/Meta'
    MeBuyer:
      type: object
      properties:
        ID:
          type: string
        DefaultCatalogID:
          type: string
    MessageCCListenerAssignment:
      type: object
      properties:
        MessageSenderAssignment:
          $ref: '#/components/schemas/MessageSenderAssignment'
        MessageConfigName:
          type: string
        MessageConfigDescription:
          type: string
        MessageType:
          type: string
        BuyerID:
          type: string
        SupplierID:
          type: string
        UserGroupID:
          type: string
        UserID:
          type: string
    MessageSender:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        MessageTypes:
          type: array
          items:
            type: string
        Description:
          type: string
    MessageSenderAssignment:
      type: object
      properties:
        MessageSenderID:
          type: string
        BuyerID:
          type: string
        SupplierID:
          type: string
        UserGroupID:
          type: string
        MessageConfigName:
          type: string
        MessageConfigDescription:
          type: string
    MeSupplier:
      type: object
      properties:
        ID:
          type: string
    Meta:
      type: object
      properties:
        Page:
          type: integer
        PageSize:
          type: integer
        TotalCount:
          type: integer
        TotalPages:
          type: integer
        ItemRange:
          type: array
          items:
            type: integer
    MetaWithFacets:
      type: object
      properties:
        Facets:
          type: array
          items:
            $ref: '#/components/schemas/ListFacet'
        Page:
          type: integer
        PageSize:
          type: integer
        TotalCount:
          type: integer
        TotalPages:
          type: integer
        ItemRange:
          type: array
          items:
            type: integer
    MeUser:
      type: object
      properties:
        Buyer:
          $ref: '#/components/schemas/MeBuyer'
        Supplier:
          $ref: '#/components/schemas/MeSupplier'
        ID:
          type: string
        Username:
          type: string
        Password:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
        Phone:
          type: string
        TermsAccepted:
          type: string
        Active:
          type: boolean
        xp:
          type: object
        AvailableRoles:
          type: array
          items:
            type: string
    Order:
      type: object
      properties:
        ID:
          type: string
        FromUser:
          $ref: '#/components/schemas/User'
        FromCompanyID:
          type: string
        FromUserID:
          type: string
        BillingAddressID:
          type: string
        BillingAddress:
          $ref: '#/components/schemas/Address'
        ShippingAddressID:
          type: string
        Comments:
          type: string
        LineItemCount:
          type: integer
        Status:
          type: string
        DateCreated:
          type: string
        DateSubmitted:
          type: string
        DateApproved:
          type: string
        DateDeclined:
          type: string
        DateCanceled:
          type: string
        DateCompleted:
          type: string
        Subtotal:
          type: number
        ShippingCost:
          type: number
        TaxCost:
          type: number
        PromotionDiscount:
          type: number
        Total:
          type: number
        IsSubmitted:
          type: boolean
        xp:
          type: object
    OrderApproval:
      type: object
      properties:
        ApprovalRuleID:
          type: string
        ApprovingGroupID:
          type: string
        Status:
          type: string
        AllowResubmit:
          type: boolean
        DateCreated:
          type: string
        DateCompleted:
          type: string
        Approver:
          $ref: '#/components/schemas/User'
        Comments:
          type: string
    OrderApprovalInfo:
      type: object
      properties:
        Comments:
          type: string
        AllowResubmit:
          type: boolean
    OrderPromotion:
      type: object
      properties:
        Amount:
          type: number
        ID:
          type: string
        Code:
          type: string
        Name:
          type: string
        RedemptionLimit:
          type: integer
        RedemptionLimitPerUser:
          type: integer
        RedemptionCount:
          type: integer
        Description:
          type: string
        FinePrint:
          type: string
        StartDate:
          type: string
        ExpirationDate:
          type: string
        EligibleExpression:
          type: string
        ValueExpression:
          type: string
        CanCombine:
          type: boolean
        xp:
          type: object
    PartialAddress:
      type: object
      properties:
        ID:
          type: string
        DateCreated:
          type: string
        CompanyName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        Zip:
          type: string
        Country:
          type: string
        Phone:
          type: string
        AddressName:
          type: string
        xp:
          type: object
    PartialApiClient:
      type: object
      properties:
        ID:
          type: string
        ClientSecret:
          type: string
        AccessTokenDuration:
          type: integer
        Active:
          type: boolean
        AppName:
          type: string
        RefreshTokenDuration:
          type: integer
        DefaultContextUserName:
          type: string
        xp:
          type: object
        AllowAnyBuyer:
          type: boolean
        AllowAnySupplier:
          type: boolean
        AllowSeller:
          type: boolean
        IsAnonBuyer:
          type: boolean
        AssignedBuyerCount:
          type: integer
        AssignedSupplierCount:
          type: integer
    PartialApprovalRule:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        ApprovingGroupID:
          type: string
        RuleExpression:
          type: string
        xp:
          type: object
    PartialBuyer:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        DefaultCatalogID:
          type: string
        Active:
          type: boolean
        xp:
          type: object
    PartialBuyerAddress:
      type: object
      properties:
        ID:
          type: string
        Shipping:
          type: boolean
        Billing:
          type: boolean
        Editable:
          type: boolean
        DateCreated:
          type: string
        CompanyName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Street1:
          type: string
        Street2:
          type: string
        City:
          type: string
        State:
          type: string
        Zip:
          type: string
        Country:
          type: string
        Phone:
          type: string
        AddressName:
          type: string
        xp:
          type: object
    PartialBuyerCreditCard:
      type: object
      properties:
        ID:
          type: string
        Editable:
          type: boolean
        Token:
          type: string
        DateCreated:
          type: string
        CardType:
          type: string
        PartialAccountNumber:
          type: string
        CardholderName:
          type: string
        ExpirationDate:
          type: string
        xp:
          type: object
    PartialCatalog:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        CategoryCount:
          type: integer
        xp:
          type: object
    PartialCategory:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        ListOrder:
          type: integer
        Active:
          type: boolean
        ParentID:
          type: string
        ChildCount:
          type: integer
        xp:
          type: object
    PartialCostCenter:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        xp:
          type: object
    PartialCreditCard:
      type: object
      properties:
        ID:
          type: string
        Token:
          type: string
        DateCreated:
          type: string
        CardType:
          type: string
        PartialAccountNumber:
          type: string
        CardholderName:
          type: string
        ExpirationDate:
          type: string
        xp:
          type: object
    PartialImpersonationConfig:
      type: object
      properties:
        ID:
          type: string
        ImpersonationBuyerID:
          type: string
        ImpersonationGroupID:
          type: string
        ImpersonationUserID:
          type: string
        BuyerID:
          type: string
        GroupID:
          type: string
        UserID:
          type: string
        SecurityProfileID:
          type: string
        ClientID:
          type: string
    PartialIncrementor:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        LastNumber:
          type: integer
        LeftPaddingCount:
          type: integer
    PartialInventory:
      type: object
      properties:
        Enabled:
          type: boolean
        NotificationPoint:
          type: integer
        VariantLevelTracking:
          type: boolean
        OrderCanExceed:
          type: boolean
        QuantityAvailable:
          type: integer
        LastUpdated:
          type: string
    PartialLineItem:
      type: object
      properties:
        ID:
          type: string
        ProductID:
          type: string
        Quantity:
          type: integer
        DateAdded:
          type: string
        QuantityShipped:
          type: integer
        UnitPrice:
          type: number
        LineTotal:
          type: number
        CostCenter:
          type: string
        DateNeeded:
          type: string
        ShippingAccount:
          type: string
        ShippingAddressID:
          type: string
        ShipFromAddressID:
          type: string
        Product:
          $ref: '#/components/schemas/LineItemProduct'
        Variant:
          $ref: '#/components/schemas/LineItemVariant'
        ShippingAddress:
          $ref: '#/components/schemas/Address'
        ShipFromAddress:
          $ref: '#/components/schemas/Address'
        SupplierID:
          type: string
        Specs:
          type: array
          items:
            $ref: '#/components/schemas/LineItemSpec'
        xp:
          type: object
    PartialLineItemProduct:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        QuantityMultiplier:
          type: integer
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        xp:
          type: object
    PartialLineItemSpec:
      type: object
      properties:
        SpecID:
          type: string
        Name:
          type: string
        OptionID:
          type: string
        Value:
          type: string
    PartialLineItemVariant:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        xp:
          type: object
    PartialMeBuyer:
      type: object
      properties:
        ID:
          type: string
        DefaultCatalogID:
          type: string
    PartialMeSupplier:
      type: object
      properties:
        ID:
          type: string
    PartialMeUser:
      type: object
      properties:
        Buyer:
          $ref: '#/components/schemas/MeBuyer'
        Supplier:
          $ref: '#/components/schemas/MeSupplier'
        ID:
          type: string
        Username:
          type: string
        Password:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
        Phone:
          type: string
        TermsAccepted:
          type: string
        Active:
          type: boolean
        xp:
          type: object
        AvailableRoles:
          type: array
          items:
            type: string
    PartialOrder:
      type: object
      properties:
        ID:
          type: string
        FromUser:
          $ref: '#/components/schemas/User'
        FromCompanyID:
          type: string
        FromUserID:
          type: string
        BillingAddressID:
          type: string
        BillingAddress:
          $ref: '#/components/schemas/Address'
        ShippingAddressID:
          type: string
        Comments:
          type: string
        LineItemCount:
          type: integer
        Status:
          type: string
        DateCreated:
          type: string
        DateSubmitted:
          type: string
        DateApproved:
          type: string
        DateDeclined:
          type: string
        DateCanceled:
          type: string
        DateCompleted:
          type: string
        Subtotal:
          type: number
        ShippingCost:
          type: number
        TaxCost:
          type: number
        PromotionDiscount:
          type: number
        Total:
          type: number
        IsSubmitted:
          type: boolean
        xp:
          type: object
    PartialPayment:
      type: object
      properties:
        ID:
          type: string
        Type:
          type: string
        DateCreated:
          type: string
        CreditCardID:
          type: string
        SpendingAccountID:
          type: string
        Description:
          type: string
        Amount:
          type: number
        Accepted:
          type: boolean
        xp:
          type: object
        Transactions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentTransaction'
    PartialPaymentTransaction:
      type: object
      properties:
        ID:
          type: string
        Type:
          type: string
        DateExecuted:
          type: string
        Amount:
          type: number
        Succeeded:
          type: boolean
        ResultCode:
          type: string
        ResultMessage:
          type: string
        xp:
          type: object
    PartialPriceBreak:
      type: object
      properties:
        Quantity:
          type: integer
        Price:
          type: number
    PartialPriceSchedule:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        ApplyTax:
          type: boolean
        ApplyShipping:
          type: boolean
        MinQuantity:
          type: integer
        MaxQuantity:
          type: integer
        UseCumulativeQuantity:
          type: boolean
        RestrictedQuantity:
          type: boolean
        PriceBreaks:
          type: array
          items:
            $ref: '#/components/schemas/PriceBreak'
        xp:
          type: object
    PartialProduct:
      type: object
      properties:
        DefaultPriceScheduleID:
          type: string
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        QuantityMultiplier:
          type: integer
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        Active:
          type: boolean
        SpecCount:
          type: integer
        xp:
          type: object
        VariantCount:
          type: integer
        ShipFromAddressID:
          type: string
        Inventory:
          $ref: '#/components/schemas/Inventory'
        DefaultSupplierID:
          type: string
    PartialProductFacet:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        XpPath:
          type: string
        ListOrder:
          type: integer
        MinCount:
          type: integer
        xp:
          type: object
    PartialPromotion:
      type: object
      properties:
        ID:
          type: string
        Code:
          type: string
        Name:
          type: string
        RedemptionLimit:
          type: integer
        RedemptionLimitPerUser:
          type: integer
        RedemptionCount:
          type: integer
        Description:
          type: string
        FinePrint:
          type: string
        StartDate:
          type: string
        ExpirationDate:
          type: string
        EligibleExpression:
          type: string
        ValueExpression:
          type: string
        CanCombine:
          type: boolean
        xp:
          type: object
    PartialShipment:
      type: object
      properties:
        ID:
          type: string
        BuyerID:
          type: string
        Shipper:
          type: string
        DateShipped:
          type: string
        DateDelivered:
          type: string
        TrackingNumber:
          type: string
        Cost:
          type: number
        xp:
          type: object
        Account:
          type: string
        FromAddressID:
          type: string
        ToAddressID:
          type: string
        FromAddress:
          $ref: '#/components/schemas/Address'
        ToAddress:
          $ref: '#/components/schemas/Address'
    PartialSpec:
      type: object
      properties:
        OptionCount:
          type: integer
        ID:
          type: string
        ListOrder:
          type: integer
        Name:
          type: string
        DefaultValue:
          type: string
        Required:
          type: boolean
        AllowOpenText:
          type: boolean
        DefaultOptionID:
          type: string
        DefinesVariant:
          type: boolean
        xp:
          type: object
    PartialSpecOption:
      type: object
      properties:
        ID:
          type: string
        Value:
          type: string
        ListOrder:
          type: integer
        IsOpenText:
          type: boolean
        PriceMarkupType:
          type: string
        PriceMarkup:
          type: number
        xp:
          type: object
    PartialSpendingAccount:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Balance:
          type: number
        AllowAsPaymentMethod:
          type: boolean
        RedemptionCode:
          type: string
        StartDate:
          type: string
        EndDate:
          type: string
        xp:
          type: object
    PartialSupplier:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Active:
          type: boolean
        xp:
          type: object
    PartialUser:
      type: object
      properties:
        ID:
          type: string
        Username:
          type: string
        Password:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
        Phone:
          type: string
        TermsAccepted:
          type: string
        Active:
          type: boolean
        xp:
          type: object
        AvailableRoles:
          type: array
          items:
            type: string
    PartialUserGroup:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        xp:
          type: object
    PartialVariant:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        Inventory:
          $ref: '#/components/schemas/VariantInventory'
        xp:
          type: object
    PartialVariantInventory:
      type: object
      properties:
        QuantityAvailable:
          type: integer
        LastUpdated:
          type: string
    PasswordReset:
      type: object
      properties:
        ClientID:
          type: string
        Username:
          type: string
        Password:
          type: string
    PasswordResetRequest:
      type: object
      properties:
        ClientID:
          type: string
        Email:
          type: string
        Username:
          type: string
        URL:
          type: string
    Payment:
      type: object
      properties:
        ID:
          type: string
        Type:
          type: string
        DateCreated:
          type: string
        CreditCardID:
          type: string
        SpendingAccountID:
          type: string
        Description:
          type: string
        Amount:
          type: number
        Accepted:
          type: boolean
        xp:
          type: object
        Transactions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentTransaction'
    PaymentTransaction:
      type: object
      properties:
        ID:
          type: string
        Type:
          type: string
        DateExecuted:
          type: string
        Amount:
          type: number
        Succeeded:
          type: boolean
        ResultCode:
          type: string
        ResultMessage:
          type: string
        xp:
          type: object
    PriceBreak:
      type: object
      properties:
        Quantity:
          type: integer
        Price:
          type: number
    PriceSchedule:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        ApplyTax:
          type: boolean
        ApplyShipping:
          type: boolean
        MinQuantity:
          type: integer
        MaxQuantity:
          type: integer
        UseCumulativeQuantity:
          type: boolean
        RestrictedQuantity:
          type: boolean
        PriceBreaks:
          type: array
          items:
            $ref: '#/components/schemas/PriceBreak'
        xp:
          type: object
    Product:
      type: object
      properties:
        DefaultPriceScheduleID:
          type: string
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        QuantityMultiplier:
          type: integer
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        Active:
          type: boolean
        SpecCount:
          type: integer
        xp:
          type: object
        VariantCount:
          type: integer
        ShipFromAddressID:
          type: string
        Inventory:
          $ref: '#/components/schemas/Inventory'
        DefaultSupplierID:
          type: string
    ProductAssignment:
      type: object
      properties:
        ProductID:
          type: string
        BuyerID:
          type: string
        UserGroupID:
          type: string
        PriceScheduleID:
          type: string
    ProductCatalogAssignment:
      type: object
      properties:
        CatalogID:
          type: string
        ProductID:
          type: string
    ProductFacet:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        XpPath:
          type: string
        ListOrder:
          type: integer
        MinCount:
          type: integer
        xp:
          type: object
    Promotion:
      type: object
      properties:
        ID:
          type: string
        Code:
          type: string
        Name:
          type: string
        RedemptionLimit:
          type: integer
        RedemptionLimitPerUser:
          type: integer
        RedemptionCount:
          type: integer
        Description:
          type: string
        FinePrint:
          type: string
        StartDate:
          type: string
        ExpirationDate:
          type: string
        EligibleExpression:
          type: string
        ValueExpression:
          type: string
        CanCombine:
          type: boolean
        xp:
          type: object
    PromotionAssignment:
      type: object
      properties:
        PromotionID:
          type: string
        BuyerID:
          type: string
        UserGroupID:
          type: string
    SecurityProfile:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Roles:
          type: array
          items:
            type: string
    SecurityProfileAssignment:
      type: object
      properties:
        SecurityProfileID:
          type: string
        BuyerID:
          type: string
        SupplierID:
          type: string
        UserID:
          type: string
        UserGroupID:
          type: string
    Shipment:
      type: object
      properties:
        ID:
          type: string
        BuyerID:
          type: string
        Shipper:
          type: string
        DateShipped:
          type: string
        DateDelivered:
          type: string
        TrackingNumber:
          type: string
        Cost:
          type: number
        xp:
          type: object
        Account:
          type: string
        FromAddressID:
          type: string
        ToAddressID:
          type: string
        FromAddress:
          $ref: '#/components/schemas/Address'
        ToAddress:
          $ref: '#/components/schemas/Address'
    ShipmentItem:
      type: object
      properties:
        OrderID:
          type: string
        LineItemID:
          type: string
        QuantityShipped:
          type: integer
        UnitPrice:
          type: number
        CostCenter:
          type: string
        DateNeeded:
          type: string
        Product:
          $ref: '#/components/schemas/LineItemProduct'
        Variant:
          $ref: '#/components/schemas/LineItemVariant'
        Specs:
          type: array
          items:
            $ref: '#/components/schemas/LineItemSpec'
        xp:
          type: object
    Spec:
      type: object
      properties:
        OptionCount:
          type: integer
        ID:
          type: string
        ListOrder:
          type: integer
        Name:
          type: string
        DefaultValue:
          type: string
        Required:
          type: boolean
        AllowOpenText:
          type: boolean
        DefaultOptionID:
          type: string
        DefinesVariant:
          type: boolean
        xp:
          type: object
    SpecOption:
      type: object
      properties:
        ID:
          type: string
        Value:
          type: string
        ListOrder:
          type: integer
        IsOpenText:
          type: boolean
        PriceMarkupType:
          type: string
        PriceMarkup:
          type: number
        xp:
          type: object
    SpecProductAssignment:
      type: object
      properties:
        SpecID:
          type: string
        ProductID:
          type: string
        DefaultValue:
          type: string
        DefaultOptionID:
          type: string
    SpendingAccount:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Balance:
          type: number
        AllowAsPaymentMethod:
          type: boolean
        RedemptionCode:
          type: string
        StartDate:
          type: string
        EndDate:
          type: string
        xp:
          type: object
    SpendingAccountAssignment:
      type: object
      properties:
        SpendingAccountID:
          type: string
        UserID:
          type: string
        UserGroupID:
          type: string
        AllowExceed:
          type: boolean
    Supplier:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Active:
          type: boolean
        xp:
          type: object
    TokenPasswordReset:
      type: object
      properties:
        NewPassword:
          type: string
    User:
      type: object
      properties:
        ID:
          type: string
        Username:
          type: string
        Password:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
        Phone:
          type: string
        TermsAccepted:
          type: string
        Active:
          type: boolean
        xp:
          type: object
        AvailableRoles:
          type: array
          items:
            type: string
    UserGroup:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        xp:
          type: object
    UserGroupAssignment:
      type: object
      properties:
        UserGroupID:
          type: string
        UserID:
          type: string
    Variant:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Description:
          type: string
        Active:
          type: boolean
        ShipWeight:
          type: number
        ShipHeight:
          type: number
        ShipWidth:
          type: number
        ShipLength:
          type: number
        Inventory:
          $ref: '#/components/schemas/VariantInventory'
        xp:
          type: object
    VariantInventory:
      type: object
      properties:
        QuantityAvailable:
          type: integer
        LastUpdated:
          type: string
    Authentication:
      type: object
      properties:
        access_token:
          type: string
paths:
  /addresses:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddress'
      operationId: List|v1/addresses
      tags:
        - AdminAddress
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - AdminAddressAdmin
            - AdminAddressReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: Create|v1/addresses
      tags:
        - AdminAddress
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - AdminAddressAdmin
  '/addresses/{addressID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Get|v1/addresses/{addressID}'
      tags:
        - AdminAddress
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminAddressAdmin
            - AdminAddressReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Save|v1/addresses/{addressID}'
      tags:
        - AdminAddress
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminAddressAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/addresses/{addressID}'
      tags:
        - AdminAddress
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminAddressAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Patch|v1/addresses/{addressID}'
      tags:
        - AdminAddress
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminAddressAdmin
  /adminusers:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
      operationId: List|v1/adminusers
      tags:
        - AdminUser
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - AdminUserAdmin
            - AdminUserReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: Create|v1/adminusers
      tags:
        - AdminUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - AdminUserAdmin
  '/adminusers/{userID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Get|v1/adminusers/{userID}'
      tags:
        - AdminUser
      parameters:
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserAdmin
            - AdminUserReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Save|v1/adminusers/{userID}'
      tags:
        - AdminUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/adminusers/{userID}'
      tags:
        - AdminUser
      parameters:
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Patch|v1/adminusers/{userID}'
      tags:
        - AdminUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserAdmin
  /apiclients:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiClient'
      operationId: List|v1/apiclients
      tags:
        - ApiClient
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
            - ApiClientReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
      operationId: Create|v1/apiclients
      tags:
        - ApiClient
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClient'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
  '/apiclients/{apiClientID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
      operationId: 'Get|v1/apiclients/{apiClientID}'
      tags:
        - ApiClient
      parameters:
        - name: apiClientID
          in: path
          description: ID of the api client.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
            - ApiClientReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
      operationId: 'Save|v1/apiclients/{apiClientID}'
      tags:
        - ApiClient
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClient'
      parameters:
        - name: apiClientID
          in: path
          description: ID of the api client.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/apiclients/{apiClientID}'
      tags:
        - ApiClient
      parameters:
        - name: apiClientID
          in: path
          description: ID of the api client.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'
      operationId: 'Patch|v1/apiclients/{apiClientID}'
      tags:
        - ApiClient
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClient'
      parameters:
        - name: apiClientID
          in: path
          description: ID of the api client.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
  /apiclients/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiClientAssignment'
      operationId: ListAssignments|v1/apiclients/assignments
      tags:
        - ApiClient
      parameters:
        - name: apiClientID
          in: query
          description: ID of the api client.
          required: false
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
            - ApiClientReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveAssignment|v1/apiclients/assignments
      tags:
        - ApiClient
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
  /buyers:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuyer'
      operationId: List|v1/buyers
      tags:
        - Buyer
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - BuyerAdmin
            - BuyerReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
      operationId: Create|v1/buyers
      tags:
        - Buyer
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Buyer'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - BuyerAdmin
  '/buyers/{buyerID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
      operationId: 'Get|v1/buyers/{buyerID}'
      tags:
        - Buyer
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerAdmin
            - BuyerReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
      operationId: 'Save|v1/buyers/{buyerID}'
      tags:
        - Buyer
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Buyer'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}'
      tags:
        - Buyer
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
      operationId: 'Patch|v1/buyers/{buyerID}'
      tags:
        - Buyer
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Buyer'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerAdmin
  '/buyers/{buyerID}/addresses':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddress'
      operationId: 'List|v1/buyers/{buyerID}/addresses'
      tags:
        - Address
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
            - AddressReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Create|v1/buyers/{buyerID}/addresses'
      tags:
        - Address
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
  '/buyers/{buyerID}/addresses/{addressID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Get|v1/buyers/{buyerID}/addresses/{addressID}'
      tags:
        - Address
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
            - AddressReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Save|v1/buyers/{buyerID}/addresses/{addressID}'
      tags:
        - Address
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/addresses/{addressID}'
      tags:
        - Address
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Patch|v1/buyers/{buyerID}/addresses/{addressID}'
      tags:
        - Address
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
  '/buyers/{buyerID}/addresses/{addressID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/buyers/{buyerID}/addresses/{addressID}/assignments'
      tags:
        - Address
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
  '/buyers/{buyerID}/addresses/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddressAssignment'
      operationId: 'ListAssignments|v1/buyers/{buyerID}/addresses/assignments'
      tags:
        - Address
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: addressID
          in: query
          description: ID of the address.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the address assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: isShipping
          in: query
          description: Is shipping of the address assignment.
          required: false
          schema:
            type: boolean
        - name: isBilling
          in: query
          description: Is billing of the address assignment.
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
            - AddressReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveAssignment|v1/buyers/{buyerID}/addresses/assignments'
      tags:
        - Address
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressAssignment'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AddressAdmin
  '/buyers/{buyerID}/ApiClients/Assignments/{apiClientID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteBuyerAssignment|v1/buyers/{buyerID}/ApiClients/Assignments/{apiClientID}'
      tags:
        - ApiClient
      parameters:
        - name: apiClientID
          in: path
          description: ID of the api client.
          required: true
          schema:
            type: string
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
  '/buyers/{buyerID}/approvalrules':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApprovalRule'
      operationId: 'List|v1/buyers/{buyerID}/approvalrules'
      tags:
        - ApprovalRule
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ApprovalRuleAdmin
            - ApprovalRuleReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRule'
      operationId: 'Create|v1/buyers/{buyerID}/approvalrules'
      tags:
        - ApprovalRule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRule'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApprovalRuleAdmin
  '/buyers/{buyerID}/approvalrules/{approvalRuleID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRule'
      operationId: 'Get|v1/buyers/{buyerID}/approvalrules/{approvalRuleID}'
      tags:
        - ApprovalRule
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: approvalRuleID
          in: path
          description: ID of the approval rule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApprovalRuleAdmin
            - ApprovalRuleReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRule'
      operationId: 'Save|v1/buyers/{buyerID}/approvalrules/{approvalRuleID}'
      tags:
        - ApprovalRule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRule'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: approvalRuleID
          in: path
          description: ID of the approval rule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApprovalRuleAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/approvalrules/{approvalRuleID}'
      tags:
        - ApprovalRule
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: approvalRuleID
          in: path
          description: ID of the approval rule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApprovalRuleAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRule'
      operationId: 'Patch|v1/buyers/{buyerID}/approvalrules/{approvalRuleID}'
      tags:
        - ApprovalRule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRule'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: approvalRuleID
          in: path
          description: ID of the approval rule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApprovalRuleAdmin
  '/buyers/{buyerID}/costcenters':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCostCenter'
      operationId: 'List|v1/buyers/{buyerID}/costcenters'
      tags:
        - CostCenter
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
            - CostCenterReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCenter'
      operationId: 'Create|v1/buyers/{buyerID}/costcenters'
      tags:
        - CostCenter
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCenter'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
  '/buyers/{buyerID}/costcenters/{costCenterID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCenter'
      operationId: 'Get|v1/buyers/{buyerID}/costcenters/{costCenterID}'
      tags:
        - CostCenter
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: costCenterID
          in: path
          description: ID of the cost center.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
            - CostCenterReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCenter'
      operationId: 'Save|v1/buyers/{buyerID}/costcenters/{costCenterID}'
      tags:
        - CostCenter
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCenter'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: costCenterID
          in: path
          description: ID of the cost center.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/costcenters/{costCenterID}'
      tags:
        - CostCenter
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: costCenterID
          in: path
          description: ID of the cost center.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCenter'
      operationId: 'Patch|v1/buyers/{buyerID}/costcenters/{costCenterID}'
      tags:
        - CostCenter
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCenter'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: costCenterID
          in: path
          description: ID of the cost center.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
  '/buyers/{buyerID}/costcenters/{costCenterID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/buyers/{buyerID}/costcenters/{costCenterID}/assignments'
      tags:
        - CostCenter
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: costCenterID
          in: path
          description: ID of the cost center.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
  '/buyers/{buyerID}/costcenters/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCostCenterAssignment'
      operationId: 'ListAssignments|v1/buyers/{buyerID}/costcenters/assignments'
      tags:
        - CostCenter
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: costCenterID
          in: query
          description: ID of the cost center.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the cost center assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
            - CostCenterReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveAssignment|v1/buyers/{buyerID}/costcenters/assignments'
      tags:
        - CostCenter
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCenterAssignment'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CostCenterAdmin
  '/buyers/{buyerID}/creditcards':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCreditCard'
      operationId: 'List|v1/buyers/{buyerID}/creditcards'
      tags:
        - CreditCard
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
            - CreditCardReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCard'
      operationId: 'Create|v1/buyers/{buyerID}/creditcards'
      tags:
        - CreditCard
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCard'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
  '/buyers/{buyerID}/creditcards/{creditCardID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCard'
      operationId: 'Get|v1/buyers/{buyerID}/creditcards/{creditCardID}'
      tags:
        - CreditCard
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: creditCardID
          in: path
          description: ID of the credit card.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
            - CreditCardReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCard'
      operationId: 'Save|v1/buyers/{buyerID}/creditcards/{creditCardID}'
      tags:
        - CreditCard
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCard'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: creditCardID
          in: path
          description: ID of the credit card.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/creditcards/{creditCardID}'
      tags:
        - CreditCard
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: creditCardID
          in: path
          description: ID of the credit card.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCard'
      operationId: 'Patch|v1/buyers/{buyerID}/creditcards/{creditCardID}'
      tags:
        - CreditCard
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCard'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: creditCardID
          in: path
          description: ID of the credit card.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
  '/buyers/{buyerID}/creditcards/{creditCardID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/buyers/{buyerID}/creditcards/{creditCardID}/assignments'
      tags:
        - CreditCard
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: creditCardID
          in: path
          description: ID of the credit card.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
  '/buyers/{buyerID}/creditcards/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCreditCardAssignment'
      operationId: 'ListAssignments|v1/buyers/{buyerID}/creditcards/assignments'
      tags:
        - CreditCard
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: creditCardID
          in: query
          description: ID of the credit card.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the credit card assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
            - CreditCardReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveAssignment|v1/buyers/{buyerID}/creditcards/assignments'
      tags:
        - CreditCard
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCardAssignment'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CreditCardAdmin
  '/buyers/{buyerID}/spendingaccounts':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpendingAccount'
      operationId: 'List|v1/buyers/{buyerID}/spendingaccounts'
      tags:
        - SpendingAccount
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
            - SpendingAccountReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingAccount'
      operationId: 'Create|v1/buyers/{buyerID}/spendingaccounts'
      tags:
        - SpendingAccount
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendingAccount'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
  '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingAccount'
      operationId: 'Get|v1/buyers/{buyerID}/spendingaccounts/{spendingAccountID}'
      tags:
        - SpendingAccount
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: spendingAccountID
          in: path
          description: ID of the spending account.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
            - SpendingAccountReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingAccount'
      operationId: 'Save|v1/buyers/{buyerID}/spendingaccounts/{spendingAccountID}'
      tags:
        - SpendingAccount
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendingAccount'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: spendingAccountID
          in: path
          description: ID of the spending account.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/spendingaccounts/{spendingAccountID}'
      tags:
        - SpendingAccount
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: spendingAccountID
          in: path
          description: ID of the spending account.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingAccount'
      operationId: 'Patch|v1/buyers/{buyerID}/spendingaccounts/{spendingAccountID}'
      tags:
        - SpendingAccount
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendingAccount'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: spendingAccountID
          in: path
          description: ID of the spending account.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
  '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/buyers/{buyerID}/spendingaccounts/{spendingAccountID}/assignments'
      tags:
        - SpendingAccount
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: spendingAccountID
          in: path
          description: ID of the spending account.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
  '/buyers/{buyerID}/spendingaccounts/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpendingAccountAssignment'
      operationId: 'ListAssignments|v1/buyers/{buyerID}/spendingaccounts/assignments'
      tags:
        - SpendingAccount
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: spendingAccountID
          in: query
          description: ID of the spending account.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the spending account assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
            - SpendingAccountReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveAssignment|v1/buyers/{buyerID}/spendingaccounts/assignments'
      tags:
        - SpendingAccount
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendingAccountAssignment'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SpendingAccountAdmin
  '/buyers/{buyerID}/usergroups':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroup'
      operationId: 'List|v1/buyers/{buyerID}/usergroups'
      tags:
        - UserGroup
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
            - UserGroupReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Create|v1/buyers/{buyerID}/usergroups'
      tags:
        - UserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
  '/buyers/{buyerID}/usergroups/{userGroupID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Get|v1/buyers/{buyerID}/usergroups/{userGroupID}'
      tags:
        - UserGroup
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
            - UserGroupReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Save|v1/buyers/{buyerID}/usergroups/{userGroupID}'
      tags:
        - UserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/usergroups/{userGroupID}'
      tags:
        - UserGroup
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Patch|v1/buyers/{buyerID}/usergroups/{userGroupID}'
      tags:
        - UserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
  '/buyers/{buyerID}/usergroups/{userGroupID}/assignments/{userID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteUserAssignment|v1/buyers/{buyerID}/usergroups/{userGroupID}/assignments/{userID}'
      tags:
        - UserGroup
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
  '/buyers/{buyerID}/usergroups/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroupAssignment'
      operationId: 'ListUserAssignments|v1/buyers/{buyerID}/usergroups/assignments'
      tags:
        - UserGroup
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
            - UserGroupReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveUserAssignment|v1/buyers/{buyerID}/usergroups/assignments'
      tags:
        - UserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupAssignment'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - UserGroupAdmin
  '/buyers/{buyerID}/users':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
      operationId: 'List|v1/buyers/{buyerID}/users'
      tags:
        - User
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
            - BuyerUserReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Create|v1/buyers/{buyerID}/users'
      tags:
        - User
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
  '/buyers/{buyerID}/users/{userID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Get|v1/buyers/{buyerID}/users/{userID}'
      tags:
        - User
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
            - BuyerUserReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Save|v1/buyers/{buyerID}/users/{userID}'
      tags:
        - User
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/buyers/{buyerID}/users/{userID}'
      tags:
        - User
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Patch|v1/buyers/{buyerID}/users/{userID}'
      tags:
        - User
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
  '/buyers/{buyerID}/users/{userID}/accesstoken':
    post:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
      operationId: 'GetAccessToken|v1/buyers/{buyerID}/users/{userID}/accesstoken'
      tags:
        - User
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImpersonateTokenRequest'
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerImpersonation
  '/buyers/{buyerID}/users/{userID}/moveto/{newBuyerID}':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Move|v1/buyers/{buyerID}/users/{userID}/moveto/{newBuyerID}'
      tags:
        - User
      parameters:
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
        - name: newBuyerID
          in: path
          description: ID of the new buyer.
          required: true
          schema:
            type: string
        - name: orders
          in: query
          description: 'Orders of the user. Possible values: None, Unsubmitted, All.'
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - BuyerUserAdmin
  /catalogs:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalog'
      operationId: List|v1/catalogs
      tags:
        - Catalog
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
            - CatalogReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      operationId: Create|v1/catalogs
      tags:
        - Catalog
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
  '/catalogs/{catalogID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      operationId: 'Get|v1/catalogs/{catalogID}'
      tags:
        - Catalog
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
            - CatalogReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      operationId: 'Save|v1/catalogs/{catalogID}'
      tags:
        - Catalog
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/catalogs/{catalogID}'
      tags:
        - Catalog
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      operationId: 'Patch|v1/catalogs/{catalogID}'
      tags:
        - Catalog
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
  '/catalogs/{catalogID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/catalogs/{catalogID}/assignments'
      tags:
        - Catalog
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
  '/catalogs/{catalogID}/categories':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategory'
      operationId: 'List|v1/catalogs/{catalogID}/categories'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Depth of the category.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
            - CategoryReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      operationId: 'Create|v1/catalogs/{catalogID}/categories'
      tags:
        - Category
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
  '/catalogs/{catalogID}/categories/{categoryID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      operationId: 'Get|v1/catalogs/{catalogID}/categories/{categoryID}'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
            - CategoryReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      operationId: 'Save|v1/catalogs/{catalogID}/categories/{categoryID}'
      tags:
        - Category
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
    delete:
      responses:
        '204':
          description: Deleting a parent category will also delete all of that category's children.
      operationId: 'Delete|v1/catalogs/{catalogID}/categories/{categoryID}'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      operationId: 'Patch|v1/catalogs/{catalogID}/categories/{categoryID}'
      tags:
        - Category
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
  '/catalogs/{catalogID}/categories/{categoryID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/catalogs/{catalogID}/categories/{categoryID}/assignments'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
  '/catalogs/{catalogID}/categories/{categoryID}/productassignments/{productID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteProductAssignment|v1/catalogs/{catalogID}/categories/{categoryID}/productassignments/{productID}'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
  '/catalogs/{catalogID}/categories/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoryAssignment'
      operationId: 'ListAssignments|v1/catalogs/{catalogID}/categories/assignments'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: query
          description: ID of the category.
          required: false
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the category assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
            - CategoryReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveAssignment|v1/catalogs/{catalogID}/categories/assignments'
      tags:
        - Category
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryAssignment'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
  '/catalogs/{catalogID}/categories/productassignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoryProductAssignment'
      operationId: 'ListProductAssignments|v1/catalogs/{catalogID}/categories/productassignments'
      tags:
        - Category
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: categoryID
          in: query
          description: ID of the category.
          required: false
          schema:
            type: string
        - name: productID
          in: query
          description: ID of the product.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
            - CategoryReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveProductAssignment|v1/catalogs/{catalogID}/categories/productassignments'
      tags:
        - Category
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryProductAssignment'
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CategoryAdmin
  '/catalogs/{catalogID}/productassignments/{productID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteProductAssignment|v1/catalogs/{catalogID}/productassignments/{productID}'
      tags:
        - Catalog
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
  /catalogs/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalogAssignment'
      operationId: ListAssignments|v1/catalogs/assignments
      tags:
        - Catalog
      parameters:
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
            - CatalogReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveAssignment|v1/catalogs/assignments
      tags:
        - Catalog
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
  /catalogs/productassignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductCatalogAssignment'
      operationId: ListProductAssignments|v1/catalogs/productassignments
      tags:
        - Catalog
      parameters:
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
        - name: productID
          in: query
          description: ID of the product.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
            - CatalogReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveProductAssignment|v1/catalogs/productassignments
      tags:
        - Catalog
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCatalogAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - CatalogAdmin
  /impersonationconfig:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImpersonationConfig'
      operationId: List|v1/impersonationconfig
      tags:
        - ImpersonationConfig
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImpersonationConfig'
      operationId: Create|v1/impersonationconfig
      tags:
        - ImpersonationConfig
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImpersonationConfig'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
  '/impersonationconfig/{impersonationConfigID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImpersonationConfig'
      operationId: 'Get|v1/impersonationconfig/{impersonationConfigID}'
      tags:
        - ImpersonationConfig
      parameters:
        - name: impersonationConfigID
          in: path
          description: ID of the impersonation config.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImpersonationConfig'
      operationId: 'Save|v1/impersonationconfig/{impersonationConfigID}'
      tags:
        - ImpersonationConfig
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImpersonationConfig'
      parameters:
        - name: impersonationConfigID
          in: path
          description: ID of the impersonation config.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/impersonationconfig/{impersonationConfigID}'
      tags:
        - ImpersonationConfig
      parameters:
        - name: impersonationConfigID
          in: path
          description: ID of the impersonation config.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImpersonationConfig'
      operationId: 'Patch|v1/impersonationconfig/{impersonationConfigID}'
      tags:
        - ImpersonationConfig
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImpersonationConfig'
      parameters:
        - name: impersonationConfigID
          in: path
          description: ID of the impersonation config.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
  /incrementors:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncrementor'
      operationId: List|v1/incrementors
      tags:
        - Incrementor
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - IncrementorAdmin
            - IncrementorReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incrementor'
      operationId: Create|v1/incrementors
      tags:
        - Incrementor
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incrementor'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - IncrementorAdmin
  '/incrementors/{incrementorID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incrementor'
      operationId: 'Get|v1/incrementors/{incrementorID}'
      tags:
        - Incrementor
      parameters:
        - name: incrementorID
          in: path
          description: ID of the incrementor.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - IncrementorAdmin
            - IncrementorReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incrementor'
      operationId: 'Save|v1/incrementors/{incrementorID}'
      tags:
        - Incrementor
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incrementor'
      parameters:
        - name: incrementorID
          in: path
          description: ID of the incrementor.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - IncrementorAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/incrementors/{incrementorID}'
      tags:
        - Incrementor
      parameters:
        - name: incrementorID
          in: path
          description: ID of the incrementor.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - IncrementorAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incrementor'
      operationId: 'Patch|v1/incrementors/{incrementorID}'
      tags:
        - Incrementor
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incrementor'
      parameters:
        - name: incrementorID
          in: path
          description: ID of the incrementor.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - IncrementorAdmin
  /me:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeUser'
      operationId: Get|v1/me
      tags:
        - Me
      parameters: []
      security:
        - OAuth2: []
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeUser'
      operationId: Save|v1/me
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeUser'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - MeAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeUser'
      operationId: Patch|v1/me
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeUser'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - MeAdmin
  /me/addresses:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuyerAddress'
      operationId: ListAddresses|v1/me/addresses
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - MeAddressAdmin
            - Shopper
    post:
      responses:
        '201':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerAddress'
      operationId: CreateAddress|v1/me/addresses
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerAddress'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - MeAddressAdmin
  '/me/addresses/{addressID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerAddress'
      operationId: 'GetAddress|v1/me/addresses/{addressID}'
      tags:
        - Me
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeAddressAdmin
            - Shopper
    put:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerAddress'
      operationId: 'SaveAddress|v1/me/addresses/{addressID}'
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerAddress'
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeAddressAdmin
    delete:
      responses:
        '204':
          description: Only available to Buyer Users.
      operationId: 'DeleteAddress|v1/me/addresses/{addressID}'
      tags:
        - Me
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeAddressAdmin
    patch:
      responses:
        '204':
          description: Only available to Buyer Users.
      operationId: 'PatchAddress|v1/me/addresses/{addressID}'
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerAddress'
      parameters:
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeAddressAdmin
  /me/catalogs:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalog'
      operationId: ListCatalogs|v1/me/catalogs
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/catalogs/{catalogID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      operationId: 'GetCatalog|v1/me/catalogs/{catalogID}'
      tags:
        - Me
      parameters:
        - name: catalogID
          in: path
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/categories:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategory'
      operationId: ListCategories|v1/me/categories
      tags:
        - Me
      parameters:
        - name: depth
          in: query
          description: Depth of the category.
          required: false
          schema:
            type: string
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
        - name: productID
          in: query
          description: ID of the product.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/categories/{categoryID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      operationId: 'GetCategory|v1/me/categories/{categoryID}'
      tags:
        - Me
      parameters:
        - name: categoryID
          in: path
          description: ID of the category.
          required: true
          schema:
            type: string
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/costcenters:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCostCenter'
      operationId: ListCostCenters|v1/me/costcenters
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/creditcards:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuyerCreditCard'
      operationId: ListCreditCards|v1/me/creditcards
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - MeCreditCardAdmin
            - Shopper
    post:
      responses:
        '201':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerCreditCard'
      operationId: CreateCreditCard|v1/me/creditcards
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerCreditCard'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - MeCreditCardAdmin
  '/me/creditcards/{creditcardID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerCreditCard'
      operationId: 'GetCreditCard|v1/me/creditcards/{creditcardID}'
      tags:
        - Me
      parameters:
        - name: creditcardID
          in: path
          description: ID of the creditcard.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeCreditCardAdmin
            - Shopper
    put:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerCreditCard'
      operationId: 'SaveCreditCard|v1/me/creditcards/{creditcardID}'
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerCreditCard'
      parameters:
        - name: creditcardID
          in: path
          description: ID of the creditcard.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeCreditCardAdmin
    delete:
      responses:
        '204':
          description: Only available to Buyer Users.
      operationId: 'DeleteCreditCard|v1/me/creditcards/{creditcardID}'
      tags:
        - Me
      parameters:
        - name: creditcardID
          in: path
          description: ID of the creditcard.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeCreditCardAdmin
    patch:
      responses:
        '204':
          description: Only available to Buyer Users.
      operationId: 'PatchCreditCard|v1/me/creditcards/{creditcardID}'
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyerCreditCard'
      parameters:
        - name: creditcardID
          in: path
          description: ID of the creditcard.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MeCreditCardAdmin
  /me/orders:
    get:
      responses:
        '200':
          description: List orders created by this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrder'
      operationId: ListOrders|v1/me/orders
      tags:
        - Me
      parameters:
        - name: from
          in: query
          description: Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
    put:
      responses:
        '204':
          description: ''
      operationId: TransferAnonUserOrder|v1/me/orders
      tags:
        - Me
      parameters:
        - name: anonUserToken
          in: query
          description: Anon user token of the me.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/orders/approvable:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrder'
      operationId: ListApprovableOrders|v1/me/orders/approvable
      tags:
        - Me
      parameters:
        - name: from
          in: query
          description: Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/password:
    post:
      responses:
        '204':
          description: ''
      operationId: ResetPasswordByToken|v1/me/password
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPasswordReset'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - PasswordReset
  /me/products:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuyerProduct'
      operationId: ListProducts|v1/me/products
      tags:
        - Me
      parameters:
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
        - name: categoryID
          in: query
          description: ID of the category.
          required: false
          schema:
            type: string
        - name: depth
          in: query
          description: Depth of the product.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/products/{productID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerProduct'
      operationId: 'GetProduct|v1/me/products/{productID}'
      tags:
        - Me
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/products/{productID}/specs':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuyerSpec'
      operationId: 'ListSpecs|v1/me/products/{productID}/specs'
      tags:
        - Me
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/products/{productID}/specs/{specID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyerSpec'
      operationId: 'GetSpec|v1/me/products/{productID}/specs/{specID}'
      tags:
        - Me
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/promotions:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromotion'
      operationId: ListPromotions|v1/me/promotions
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/promotions/{promotionID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
      operationId: 'GetPromotion|v1/me/promotions/{promotionID}'
      tags:
        - Me
      parameters:
        - name: promotionID
          in: path
          description: ID of the promotion.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/register:
    put:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
      operationId: Register|v1/me/register
      tags:
        - Me
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeUser'
      parameters:
        - name: anonUserToken
          in: query
          description: Anon user token of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/shipments:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShipment'
      operationId: ListShipments|v1/me/shipments
      tags:
        - Me
      parameters:
        - name: orderID
          in: query
          description: ID of the order.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/shipments/{shipmentID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
      operationId: 'GetShipment|v1/me/shipments/{shipmentID}'
      tags:
        - Me
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/shipments/{shipmentID}/items':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShipmentItem'
      operationId: 'ListShipmentItems|v1/me/shipments/{shipmentID}/items'
      tags:
        - Me
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
        - name: orderID
          in: query
          description: ID of the order.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/spendingAccounts:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpendingAccount'
      operationId: ListSpendingAccounts|v1/me/spendingAccounts
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  '/me/spendingaccounts/{spendingAccountID}':
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingAccount'
      operationId: 'GetSpendingAccount|v1/me/spendingaccounts/{spendingAccountID}'
      tags:
        - Me
      parameters:
        - name: spendingAccountID
          in: path
          description: ID of the spending account.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - Shopper
  /me/usergroups:
    get:
      responses:
        '200':
          description: Only available to Buyer Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroup'
      operationId: ListUserGroups|v1/me/usergroups
      tags:
        - Me
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2: []
  /messagesenders:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageSender'
      operationId: List|v1/messagesenders
      tags:
        - MessageSender
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
  '/messagesenders/{messageSenderID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageSender'
      operationId: 'Get|v1/messagesenders/{messageSenderID}'
      tags:
        - MessageSender
      parameters:
        - name: messageSenderID
          in: path
          description: ID of the message sender.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
  '/messagesenders/{messageSenderID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/messagesenders/{messageSenderID}/assignments'
      tags:
        - MessageSender
      parameters:
        - name: messageSenderID
          in: path
          description: ID of the message sender.
          required: true
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
  /messagesenders/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageSenderAssignment'
      operationId: ListAssignments|v1/messagesenders/assignments
      tags:
        - MessageSender
      parameters:
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: messageSenderID
          in: query
          description: ID of the message sender.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the message sender assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
    post:
      responses:
        '204':
          description: ''
      operationId: SaveAssignment|v1/messagesenders/assignments
      tags:
        - MessageSender
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSenderAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
  /messagesenders/CCListenerAssignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageCCListenerAssignment'
      operationId: ListCCListenerAssignments|v1/messagesenders/CCListenerAssignments
      tags:
        - MessageSender
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
    post:
      responses:
        '204':
          description: ''
      operationId: SaveCCListenerAssignment|v1/messagesenders/CCListenerAssignments
      tags:
        - MessageSender
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCCListenerAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - MessageConfigAssignmentAdmin
  '/orders/{direction}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrder'
      operationId: 'List|v1/orders/{direction}'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
        - name: from
          in: query
          description: Lower bound of date range that the order was created.
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: Upper bound of date range that the order was created.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - OrderReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Create|v1/orders/{direction}'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Get|v1/orders/{direction}/{orderID}'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Save|v1/orders/{direction}/{orderID}'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/orders/{direction}/{orderID}'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Patch|v1/orders/{direction}/{orderID}'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/approvals':
    get:
      responses:
        '200':
          description: Returns all Approvals associated with the Order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrderApproval'
      operationId: 'ListApprovals|v1/orders/{direction}/{orderID}/approvals'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
  '/orders/{direction}/{orderID}/approve':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Approve|v1/orders/{direction}/{orderID}/approve'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderApprovalInfo'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/billto':
    put:
      responses:
        '200':
          description: 'Use only when the address is not to be saved/reused..To use a saved address (i.e. from the Addresses resource), PATCH the order''s BillingAddressID property instead.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'SetBillingAddress|v1/orders/{direction}/{orderID}/billto'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    patch:
      responses:
        '200':
          description: 'Not allowed on unsubmitted orders where BillingAddressID has been set. In that case, use the Addresses resource to update the saved address.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'PatchBillingAddress|v1/orders/{direction}/{orderID}/billto'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/cancel':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Cancel|v1/orders/{direction}/{orderID}/cancel'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/decline':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Decline|v1/orders/{direction}/{orderID}/decline'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderApprovalInfo'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/eligibleapprovers':
    get:
      responses:
        '200':
          description: Returns all Users who can approve or decline this order (but have not done so).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
      operationId: 'ListEligibleApprovers|v1/orders/{direction}/{orderID}/eligibleapprovers'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
  '/orders/{direction}/{orderID}/fromuser':
    patch:
      responses:
        '200':
          description: 'Only FirstName, LastName, and Email can be updated..Primarily used to facilitate guest checkout scenarios.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'PatchFromUser|v1/orders/{direction}/{orderID}/fromuser'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/lineitems':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLineItem'
      operationId: 'List|v1/orders/{direction}/{orderID}/lineitems'
      tags:
        - LineItem
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
      operationId: 'Create|v1/orders/{direction}/{orderID}/lineitems'
      tags:
        - LineItem
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineItem'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/lineitems/{lineItemID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
      operationId: 'Get|v1/orders/{direction}/{orderID}/lineitems/{lineItemID}'
      tags:
        - LineItem
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
      operationId: 'Save|v1/orders/{direction}/{orderID}/lineitems/{lineItemID}'
      tags:
        - LineItem
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineItem'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/orders/{direction}/{orderID}/lineitems/{lineItemID}'
      tags:
        - LineItem
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
      operationId: 'Patch|v1/orders/{direction}/{orderID}/lineitems/{lineItemID}'
      tags:
        - LineItem
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineItem'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto':
    put:
      responses:
        '200':
          description: 'Set the Shipping Address of the Line Item. Appropriate only when the Address is not to be saved/reused. To use a Saved Address (i.e. from the Addresses resource), PATCH the Line Item''s ShippingAddressID property instead.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
      operationId: 'SetShippingAddress|v1/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto'
      tags:
        - LineItem
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    patch:
      responses:
        '200':
          description: 'Partially update the Shipping Address of the Line Item. Not allowed on unsubmitted Line Items where ShippingAddressID has been set. In that case, use the Addresses resource to update the Saved Address.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
      operationId: 'PatchShippingAddress|v1/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto'
      tags:
        - LineItem
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/payments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPayment'
      operationId: 'List|v1/orders/{direction}/{orderID}/payments'
      tags:
        - Payment
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
      operationId: 'Create|v1/orders/{direction}/{orderID}/payments'
      tags:
        - Payment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/payments/{paymentID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
      operationId: 'Get|v1/orders/{direction}/{orderID}/payments/{paymentID}'
      tags:
        - Payment
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: paymentID
          in: path
          description: ID of the payment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/orders/{direction}/{orderID}/payments/{paymentID}'
      tags:
        - Payment
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: paymentID
          in: path
          description: ID of the payment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    patch:
      responses:
        '200':
          description: PUT is not a supported method for payments due to the implications associated with modifying certain properties. Patch is only permitted on certain properties that vary depending on order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
      operationId: 'Patch|v1/orders/{direction}/{orderID}/payments/{paymentID}'
      tags:
        - Payment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: paymentID
          in: path
          description: ID of the payment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/payments/{paymentID}/transactions':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
      operationId: 'CreateTransaction|v1/orders/{direction}/{orderID}/payments/{paymentID}/transactions'
      tags:
        - Payment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTransaction'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: paymentID
          in: path
          description: ID of the payment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
  '/orders/{direction}/{orderID}/payments/{paymentID}/transactions/{transactionID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteTransaction|v1/orders/{direction}/{orderID}/payments/{paymentID}/transactions/{transactionID}'
      tags:
        - Payment
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: paymentID
          in: path
          description: ID of the payment.
          required: true
          schema:
            type: string
        - name: transactionID
          in: path
          description: ID of the transaction.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
  '/orders/{direction}/{orderID}/promotions':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrderPromotion'
      operationId: 'ListPromotions|v1/orders/{direction}/{orderID}/promotions'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
            - OrderReader
  '/orders/{direction}/{orderID}/promotions/{promoCode}':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPromotion'
      operationId: 'AddPromotion|v1/orders/{direction}/{orderID}/promotions/{promoCode}'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: promoCode
          in: path
          description: Promo code of the order promotion.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    delete:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'RemovePromotion|v1/orders/{direction}/{orderID}/promotions/{promoCode}'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: promoCode
          in: path
          description: Promo code of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/ship':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Ship|v1/orders/{direction}/{orderID}/ship'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - ShipmentAdmin
  '/orders/{direction}/{orderID}/shipto':
    put:
      responses:
        '200':
          description: 'Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the order''s ShippingAddressID property instead.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'SetShippingAddress|v1/orders/{direction}/{orderID}/shipto'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
    patch:
      responses:
        '200':
          description: 'Not allowed on unsubmitted orders where ShippingAddressID has been set. In that case, use the Addresses resource to update the saved address.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'PatchShippingAddress|v1/orders/{direction}/{orderID}/shipto'
      tags:
        - Order
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  '/orders/{direction}/{orderID}/submit':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: 'Submit|v1/orders/{direction}/{orderID}/submit'
      tags:
        - Order
      parameters:
        - name: direction
          in: path
          description: 'Direction of the order, from the current user''s perspective. Possible values: incoming, outgoing.'
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - OrderAdmin
            - Shopper
  /password/reset:
    post:
      responses:
        '204':
          description: 'Sends a temporary verification code via email, which must subsequently be passed in a Reset Password call.'
      operationId: SendVerificationCode|v1/password/reset
      tags:
        - PasswordReset
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      parameters: []
      security:
        - OAuth2: []
  '/password/reset/{verificationCode}':
    put:
      responses:
        '204':
          description: ''
      operationId: 'ResetPasswordByVerificationCode|v1/password/reset/{verificationCode}'
      tags:
        - PasswordReset
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      parameters:
        - name: verificationCode
          in: path
          description: Verification code of the password reset.
          required: true
          schema:
            type: string
      security:
        - OAuth2: []
  /priceschedules:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPriceSchedule'
      operationId: List|v1/priceschedules
      tags:
        - PriceSchedule
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
            - PriceScheduleReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceSchedule'
      operationId: Create|v1/priceschedules
      tags:
        - PriceSchedule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceSchedule'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
  '/priceschedules/{priceScheduleID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceSchedule'
      operationId: 'Get|v1/priceschedules/{priceScheduleID}'
      tags:
        - PriceSchedule
      parameters:
        - name: priceScheduleID
          in: path
          description: ID of the price schedule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
            - PriceScheduleReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceSchedule'
      operationId: 'Save|v1/priceschedules/{priceScheduleID}'
      tags:
        - PriceSchedule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceSchedule'
      parameters:
        - name: priceScheduleID
          in: path
          description: ID of the price schedule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/priceschedules/{priceScheduleID}'
      tags:
        - PriceSchedule
      parameters:
        - name: priceScheduleID
          in: path
          description: ID of the price schedule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceSchedule'
      operationId: 'Patch|v1/priceschedules/{priceScheduleID}'
      tags:
        - PriceSchedule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceSchedule'
      parameters:
        - name: priceScheduleID
          in: path
          description: ID of the price schedule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
  '/priceschedules/{priceScheduleID}/PriceBreaks':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceSchedule'
      operationId: 'SavePriceBreak|v1/priceschedules/{priceScheduleID}/PriceBreaks'
      tags:
        - PriceSchedule
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceBreak'
      parameters:
        - name: priceScheduleID
          in: path
          description: ID of the price schedule.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeletePriceBreak|v1/priceschedules/{priceScheduleID}/PriceBreaks'
      tags:
        - PriceSchedule
      parameters:
        - name: priceScheduleID
          in: path
          description: ID of the price schedule.
          required: true
          schema:
            type: string
        - name: quantity
          in: query
          description: Quantity of the price schedule.
          required: true
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - PriceScheduleAdmin
  /productfacets:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductFacet'
      operationId: List|v1/productfacets
      tags:
        - ProductFacet
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductFacetAdmin
            - ProductFacetReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFacet'
      operationId: Create|v1/productfacets
      tags:
        - ProductFacet
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFacet'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ProductFacetAdmin
  '/productfacets/{productFacetID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFacet'
      operationId: 'Get|v1/productfacets/{productFacetID}'
      tags:
        - ProductFacet
      parameters:
        - name: productFacetID
          in: path
          description: ID of the product facet.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductFacetAdmin
            - ProductFacetReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFacet'
      operationId: 'Save|v1/productfacets/{productFacetID}'
      tags:
        - ProductFacet
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFacet'
      parameters:
        - name: productFacetID
          in: path
          description: ID of the product facet.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductFacetAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/productfacets/{productFacetID}'
      tags:
        - ProductFacet
      parameters:
        - name: productFacetID
          in: path
          description: ID of the product facet.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductFacetAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFacet'
      operationId: 'Patch|v1/productfacets/{productFacetID}'
      tags:
        - ProductFacet
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFacet'
      parameters:
        - name: productFacetID
          in: path
          description: ID of the product facet.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductFacetAdmin
  /products:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProduct'
      operationId: List|v1/products
      tags:
        - Product
      parameters:
        - name: catalogID
          in: query
          description: ID of the catalog.
          required: false
          schema:
            type: string
        - name: categoryID
          in: query
          description: ID of the category.
          required: false
          schema:
            type: string
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: Create|v1/products
      tags:
        - Product
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/products/{productID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: 'Get|v1/products/{productID}'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: 'Save|v1/products/{productID}'
      tags:
        - Product
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/products/{productID}'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: 'Patch|v1/products/{productID}'
      tags:
        - Product
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/products/{productID}/assignments/{buyerID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/products/{productID}/assignments/{buyerID}'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: buyerID
          in: path
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductAssignmentAdmin
  '/products/{productID}/suppliers':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSupplier'
      operationId: 'ListSuppliers|v1/products/{productID}/suppliers'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
  '/products/{productID}/suppliers/{supplierID}':
    put:
      responses:
        '204':
          description: ''
      operationId: 'SaveSupplier|v1/products/{productID}/suppliers/{supplierID}'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'RemoveSupplier|v1/products/{productID}/suppliers/{supplierID}'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/products/{productID}/variants':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariant'
      operationId: 'ListVariants|v1/products/{productID}/variants'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
  '/products/{productID}/variants/{variantID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
      operationId: 'GetVariant|v1/products/{productID}/variants/{variantID}'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: variantID
          in: path
          description: ID of the variant.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    put:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
      operationId: 'SaveVariant|v1/products/{productID}/variants/{variantID}'
      tags:
        - Product
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variant'
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: variantID
          in: path
          description: ID of the variant.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
      operationId: 'PatchVariant|v1/products/{productID}/variants/{variantID}'
      tags:
        - Product
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variant'
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: variantID
          in: path
          description: ID of the variant.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/products/{productID}/variants/generate':
    post:
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: 'GenerateVariants|v1/products/{productID}/variants/generate'
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
        - name: overwriteExisting
          in: query
          description: Overwrite existing of the product.
          required: false
          schema:
            type: boolean
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  /products/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductAssignment'
      operationId: ListAssignments|v1/products/assignments
      tags:
        - Product
      parameters:
        - name: productID
          in: query
          description: ID of the product.
          required: false
          schema:
            type: string
        - name: priceScheduleID
          in: query
          description: ID of the price schedule.
          required: false
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the product assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductAssignmentAdmin
            - ProductReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveAssignment|v1/products/assignments
      tags:
        - Product
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductAssignmentAdmin
  /promotions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromotion'
      operationId: List|v1/promotions
      tags:
        - Promotion
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
            - PromotionReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
      operationId: Create|v1/promotions
      tags:
        - Promotion
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
  '/promotions/{promotionID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
      operationId: 'Get|v1/promotions/{promotionID}'
      tags:
        - Promotion
      parameters:
        - name: promotionID
          in: path
          description: ID of the promotion.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
            - PromotionReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
      operationId: 'Save|v1/promotions/{promotionID}'
      tags:
        - Promotion
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      parameters:
        - name: promotionID
          in: path
          description: ID of the promotion.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/promotions/{promotionID}'
      tags:
        - Promotion
      parameters:
        - name: promotionID
          in: path
          description: ID of the promotion.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
      operationId: 'Patch|v1/promotions/{promotionID}'
      tags:
        - Promotion
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      parameters:
        - name: promotionID
          in: path
          description: ID of the promotion.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
  '/promotions/{promotionID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/promotions/{promotionID}/assignments'
      tags:
        - Promotion
      parameters:
        - name: promotionID
          in: path
          description: ID of the promotion.
          required: true
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: true
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
  /promotions/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPromotionAssignment'
      operationId: ListAssignments|v1/promotions/assignments
      tags:
        - Promotion
      parameters:
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: promotionID
          in: query
          description: ID of the promotion.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the promotion assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
            - PromotionReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveAssignment|v1/promotions/assignments
      tags:
        - Promotion
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - PromotionAdmin
  /securityprofiles:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecurityProfile'
      operationId: List|v1/securityprofiles
      tags:
        - SecurityProfile
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
  '/securityprofiles/{securityProfileID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityProfile'
      operationId: 'Get|v1/securityprofiles/{securityProfileID}'
      tags:
        - SecurityProfile
      parameters:
        - name: securityProfileID
          in: path
          description: ID of the security profile.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
  '/securityprofiles/{securityProfileID}/assignments':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteAssignment|v1/securityprofiles/{securityProfileID}/assignments'
      tags:
        - SecurityProfile
      parameters:
        - name: securityProfileID
          in: path
          description: ID of the security profile.
          required: true
          schema:
            type: string
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
  /securityprofiles/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecurityProfileAssignment'
      operationId: ListAssignments|v1/securityprofiles/assignments
      tags:
        - SecurityProfile
      parameters:
        - name: buyerID
          in: query
          description: ID of the buyer.
          required: false
          schema:
            type: string
        - name: supplierID
          in: query
          description: ID of the supplier.
          required: false
          schema:
            type: string
        - name: securityProfileID
          in: query
          description: ID of the security profile.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: commerceRole
          in: query
          description: 'Commerce role of the security profile assignment. Possible values: Buyer, Seller, Supplier.'
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: 'Level of the security profile assignment. Possible values: User, Group, Company.'
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
    post:
      responses:
        '204':
          description: ''
      operationId: SaveAssignment|v1/securityprofiles/assignments
      tags:
        - SecurityProfile
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityProfileAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - SetSecurityProfile
  /shipments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShipment'
      operationId: List|v1/shipments
      tags:
        - Shipment
      parameters:
        - name: orderID
          in: query
          description: ID of the order.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
            - ShipmentReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
      operationId: Create|v1/shipments
      tags:
        - Shipment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
  '/shipments/{shipmentID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
      operationId: 'Get|v1/shipments/{shipmentID}'
      tags:
        - Shipment
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
            - ShipmentReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
      operationId: 'Save|v1/shipments/{shipmentID}'
      tags:
        - Shipment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/shipments/{shipmentID}'
      tags:
        - Shipment
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
      operationId: 'Patch|v1/shipments/{shipmentID}'
      tags:
        - Shipment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
  '/shipments/{shipmentID}/items':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShipmentItem'
      operationId: 'ListItems|v1/shipments/{shipmentID}/items'
      tags:
        - Shipment
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
            - ShipmentReader
    post:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentItem'
      operationId: 'SaveItem|v1/shipments/{shipmentID}/items'
      tags:
        - Shipment
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShipmentItem'
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
  '/shipments/{shipmentID}/items/{orderID}/{lineItemID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentItem'
      operationId: 'GetItem|v1/shipments/{shipmentID}/items/{orderID}/{lineItemID}'
      tags:
        - Shipment
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
            - ShipmentReader
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteItem|v1/shipments/{shipmentID}/items/{orderID}/{lineItemID}'
      tags:
        - Shipment
      parameters:
        - name: shipmentID
          in: path
          description: ID of the shipment.
          required: true
          schema:
            type: string
        - name: orderID
          in: path
          description: ID of the order.
          required: true
          schema:
            type: string
        - name: lineItemID
          in: path
          description: ID of the line item.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ShipmentAdmin
  /specs:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpec'
      operationId: List|v1/specs
      tags:
        - Spec
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spec'
      operationId: Create|v1/specs
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spec'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/specs/{specID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spec'
      operationId: 'Get|v1/specs/{specID}'
      tags:
        - Spec
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spec'
      operationId: 'Save|v1/specs/{specID}'
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spec'
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/specs/{specID}'
      tags:
        - Spec
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spec'
      operationId: 'Patch|v1/specs/{specID}'
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spec'
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/specs/{specID}/options':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpecOption'
      operationId: 'ListOptions|v1/specs/{specID}/options'
      tags:
        - Spec
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    post:
      responses:
        '201':
          description: 'A Spec can have multiple Options-- for example, if the spec is called ''Color'', the options might be ''Blue'', ''Red'', and ''Green''. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecOption'
      operationId: 'CreateOption|v1/specs/{specID}/options'
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecOption'
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/specs/{specID}/options/{optionID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecOption'
      operationId: 'GetOption|v1/specs/{specID}/options/{optionID}'
      tags:
        - Spec
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: optionID
          in: path
          description: ID of the option.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    put:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecOption'
      operationId: 'SaveOption|v1/specs/{specID}/options/{optionID}'
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecOption'
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: optionID
          in: path
          description: ID of the option.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteOption|v1/specs/{specID}/options/{optionID}'
      tags:
        - Spec
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: optionID
          in: path
          description: ID of the option.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecOption'
      operationId: 'PatchOption|v1/specs/{specID}/options/{optionID}'
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecOption'
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: optionID
          in: path
          description: ID of the option.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  '/specs/{specID}/productassignments/{productID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteProductAssignment|v1/specs/{specID}/productassignments/{productID}'
      tags:
        - Spec
      parameters:
        - name: specID
          in: path
          description: ID of the spec.
          required: true
          schema:
            type: string
        - name: productID
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  /specs/productassignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpecProductAssignment'
      operationId: ListProductAssignments|v1/specs/productassignments
      tags:
        - Spec
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
            - ProductReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveProductAssignment|v1/specs/productassignments
      tags:
        - Spec
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecProductAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - ProductAdmin
  /suppliers:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSupplier'
      operationId: List|v1/suppliers
      tags:
        - Supplier
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SupplierAdmin
            - SupplierReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
      operationId: Create|v1/suppliers
      tags:
        - Supplier
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - SupplierAdmin
  '/suppliers/{supplierID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
      operationId: 'Get|v1/suppliers/{supplierID}'
      tags:
        - Supplier
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAdmin
            - SupplierReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
      operationId: 'Save|v1/suppliers/{supplierID}'
      tags:
        - Supplier
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/suppliers/{supplierID}'
      tags:
        - Supplier
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
      operationId: 'Patch|v1/suppliers/{supplierID}'
      tags:
        - Supplier
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAdmin
  '/suppliers/{supplierID}/addresses':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddress'
      operationId: 'List|v1/suppliers/{supplierID}/addresses'
      tags:
        - SupplierAddress
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SupplierAddressAdmin
            - SupplierAddressReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Create|v1/suppliers/{supplierID}/addresses'
      tags:
        - SupplierAddress
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAddressAdmin
  '/suppliers/{supplierID}/addresses/{addressID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Get|v1/suppliers/{supplierID}/addresses/{addressID}'
      tags:
        - SupplierAddress
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAddressAdmin
            - SupplierAddressReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Save|v1/suppliers/{supplierID}/addresses/{addressID}'
      tags:
        - SupplierAddress
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAddressAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/suppliers/{supplierID}/addresses/{addressID}'
      tags:
        - SupplierAddress
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAddressAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: 'Patch|v1/suppliers/{supplierID}/addresses/{addressID}'
      tags:
        - SupplierAddress
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: addressID
          in: path
          description: ID of the address.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierAddressAdmin
  '/suppliers/{supplierID}/ApiClients/Assignments/{apiClientID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteSupplierAssignment|v1/suppliers/{supplierID}/ApiClients/Assignments/{apiClientID}'
      tags:
        - ApiClient
      parameters:
        - name: apiClientID
          in: path
          description: ID of the api client.
          required: true
          schema:
            type: string
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - ApiClientAdmin
  '/suppliers/{supplierID}/usergroups':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroup'
      operationId: 'List|v1/suppliers/{supplierID}/usergroups'
      tags:
        - SupplierUserGroup
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
            - SupplierUserGroupReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Create|v1/suppliers/{supplierID}/usergroups'
      tags:
        - SupplierUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
  '/suppliers/{supplierID}/usergroups/{userGroupID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Get|v1/suppliers/{supplierID}/usergroups/{userGroupID}'
      tags:
        - SupplierUserGroup
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
            - SupplierUserGroupReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Save|v1/suppliers/{supplierID}/usergroups/{userGroupID}'
      tags:
        - SupplierUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/suppliers/{supplierID}/usergroups/{userGroupID}'
      tags:
        - SupplierUserGroup
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Patch|v1/suppliers/{supplierID}/usergroups/{userGroupID}'
      tags:
        - SupplierUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
  '/suppliers/{supplierID}/usergroups/{userGroupID}/assignments/{userID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteUserAssignment|v1/suppliers/{supplierID}/usergroups/{userGroupID}/assignments/{userID}'
      tags:
        - SupplierUserGroup
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
  '/suppliers/{supplierID}/usergroups/assignments':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroupAssignment'
      operationId: 'ListUserAssignments|v1/suppliers/{supplierID}/usergroups/assignments'
      tags:
        - SupplierUserGroup
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
            - SupplierUserGroupReader
    post:
      responses:
        '204':
          description: ''
      operationId: 'SaveUserAssignment|v1/suppliers/{supplierID}/usergroups/assignments'
      tags:
        - SupplierUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupAssignment'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserGroupAdmin
  '/suppliers/{supplierID}/users':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
      operationId: 'List|v1/suppliers/{supplierID}/users'
      tags:
        - SupplierUser
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
            - SupplierUserReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Create|v1/suppliers/{supplierID}/users'
      tags:
        - SupplierUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
  '/suppliers/{supplierID}/users/{userID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Get|v1/suppliers/{supplierID}/users/{userID}'
      tags:
        - SupplierUser
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
            - SupplierUserReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Save|v1/suppliers/{supplierID}/users/{userID}'
      tags:
        - SupplierUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/suppliers/{supplierID}/users/{userID}'
      tags:
        - SupplierUser
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: 'Patch|v1/suppliers/{supplierID}/users/{userID}'
      tags:
        - SupplierUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
  '/suppliers/{supplierID}/users/{userID}/accesstoken':
    post:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
      operationId: 'GetAccessToken|v1/suppliers/{supplierID}/users/{userID}/accesstoken'
      tags:
        - SupplierUser
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImpersonateTokenRequest'
      parameters:
        - name: supplierID
          in: path
          description: ID of the supplier.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - SupplierUserAdmin
  /usergroups:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroup'
      operationId: List|v1/usergroups
      tags:
        - AdminUserGroup
      parameters:
        - name: search
          in: query
          description: Word or phrase to search for.
          required: false
          schema:
            type: string
        - name: searchOn
          in: query
          description: Comma-delimited list of fields to search on.
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Comma-delimited list of fields to sort by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
        - name: filters
          in: query
          description: Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or 'xp.???'
          required: false
          schema:
            type: object
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
            - AdminUserGroupReader
    post:
      responses:
        '201':
          description: 'If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: Create|v1/usergroups
      tags:
        - AdminUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
  '/usergroups/{userGroupID}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Get|v1/usergroups/{userGroupID}'
      tags:
        - AdminUserGroup
      parameters:
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
            - AdminUserGroupReader
    put:
      responses:
        '200':
          description: 'If an object with the same ID already exists, it will be overwritten.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Save|v1/usergroups/{userGroupID}'
      tags:
        - AdminUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
    delete:
      responses:
        '204':
          description: ''
      operationId: 'Delete|v1/usergroups/{userGroupID}'
      tags:
        - AdminUserGroup
      parameters:
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
    patch:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
      operationId: 'Patch|v1/usergroups/{userGroupID}'
      tags:
        - AdminUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
      parameters:
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
  '/usergroups/{userGroupID}/assignments/{userID}':
    delete:
      responses:
        '204':
          description: ''
      operationId: 'DeleteUserAssignment|v1/usergroups/{userGroupID}/assignments/{userID}'
      tags:
        - AdminUserGroup
      parameters:
        - name: userGroupID
          in: path
          description: ID of the user group.
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
  /usergroups/assignments:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserGroupAssignment'
      operationId: ListUserAssignments|v1/usergroups/assignments
      tags:
        - AdminUserGroup
      parameters:
        - name: userGroupID
          in: query
          description: ID of the user group.
          required: false
          schema:
            type: string
        - name: userID
          in: query
          description: ID of the user.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 'Page of results to return. Default: 1'
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: 'Number of results to return per page. Default: 20, max: 100.'
          required: false
          schema:
            type: integer
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
            - AdminUserGroupReader
    post:
      responses:
        '204':
          description: ''
      operationId: SaveUserAssignment|v1/usergroups/assignments
      tags:
        - AdminUserGroup
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupAssignment'
      parameters: []
      security:
        - OAuth2:
            - FullAccess
            - AdminUserGroupAdmin
