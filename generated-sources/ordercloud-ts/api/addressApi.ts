/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */
import { Address } from '../model/address';
import { AddressAssignment } from '../model/addressAssignment';
import { ListAddress } from '../model/listAddress';
import { ListAddressAssignment } from '../model/listAddressAssignment';

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'https://api.ordercloud.io/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AddressApiApiKeys {
}

export class AddressApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'OAuth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AddressApiApiKeys, value: string) {
        (this.authentications as any)[AddressApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.OAuth2.accessToken = token;
    }

    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param Address 
     */
    public createV1buyersbuyerIDaddresses (BuyerID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Address;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling createV1buyersbuyerIDaddresses.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling createV1buyersbuyerIDaddresses.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Address;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Address");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressID ID of the address.
     * @param UserID ID of the user.
     * @param UserGroupID ID of the user group.
     */
    public deleteAssignmentV1buyersbuyerIDaddressesaddressIDassignments (BuyerID: string, AddressID: string, UserID?: string, UserGroupID?: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/{addressID}/assignments'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)))
            .replace('{' + 'addressID' + '}', encodeURIComponent(String(AddressID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling deleteAssignmentV1buyersbuyerIDaddressesaddressIDassignments.');
        }

        // verify required parameter 'AddressID' is not null or undefined
        if (AddressID === null || AddressID === undefined) {
            throw new Error('Required parameter AddressID was null or undefined when calling deleteAssignmentV1buyersbuyerIDaddressesaddressIDassignments.');
        }

        if (UserID !== undefined) {
            localVarQueryParameters['userID'] = ObjectSerializer.serialize(UserID, "string");
        }

        if (UserGroupID !== undefined) {
            localVarQueryParameters['userGroupID'] = ObjectSerializer.serialize(UserGroupID, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressID ID of the address.
     */
    public deleteV1buyersbuyerIDaddressesaddressID (BuyerID: string, AddressID: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/{addressID}'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)))
            .replace('{' + 'addressID' + '}', encodeURIComponent(String(AddressID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling deleteV1buyersbuyerIDaddressesaddressID.');
        }

        // verify required parameter 'AddressID' is not null or undefined
        if (AddressID === null || AddressID === undefined) {
            throw new Error('Required parameter AddressID was null or undefined when calling deleteV1buyersbuyerIDaddressesaddressID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressID ID of the address.
     */
    public getV1buyersbuyerIDaddressesaddressID (BuyerID: string, AddressID: string) : Promise<{ response: http.ClientResponse; body: Address;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/{addressID}'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)))
            .replace('{' + 'addressID' + '}', encodeURIComponent(String(AddressID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling getV1buyersbuyerIDaddressesaddressID.');
        }

        // verify required parameter 'AddressID' is not null or undefined
        if (AddressID === null || AddressID === undefined) {
            throw new Error('Required parameter AddressID was null or undefined when calling getV1buyersbuyerIDaddressesaddressID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Address;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Address");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressID ID of the address.
     * @param UserID ID of the user.
     * @param UserGroupID ID of the user group.
     * @param Level Level of the address assignment. Possible values: User, Group, Company.
     * @param IsShipping Is shipping of the address assignment.
     * @param IsBilling Is billing of the address assignment.
     * @param Page Page of results to return. Default: 1
     * @param PageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listAssignmentsV1buyersbuyerIDaddressesassignments (BuyerID: string, AddressID?: string, UserID?: string, UserGroupID?: string, Level?: string, IsShipping?: boolean, IsBilling?: boolean, Page?: number, PageSize?: number) : Promise<{ response: http.ClientResponse; body: ListAddressAssignment;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/assignments'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling listAssignmentsV1buyersbuyerIDaddressesassignments.');
        }

        if (AddressID !== undefined) {
            localVarQueryParameters['addressID'] = ObjectSerializer.serialize(AddressID, "string");
        }

        if (UserID !== undefined) {
            localVarQueryParameters['userID'] = ObjectSerializer.serialize(UserID, "string");
        }

        if (UserGroupID !== undefined) {
            localVarQueryParameters['userGroupID'] = ObjectSerializer.serialize(UserGroupID, "string");
        }

        if (Level !== undefined) {
            localVarQueryParameters['level'] = ObjectSerializer.serialize(Level, "string");
        }

        if (IsShipping !== undefined) {
            localVarQueryParameters['isShipping'] = ObjectSerializer.serialize(IsShipping, "boolean");
        }

        if (IsBilling !== undefined) {
            localVarQueryParameters['isBilling'] = ObjectSerializer.serialize(IsBilling, "boolean");
        }

        if (Page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(Page, "number");
        }

        if (PageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(PageSize, "number");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ListAddressAssignment;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ListAddressAssignment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param Search Word or phrase to search for.
     * @param SearchOn Comma-delimited list of fields to search on.
     * @param SortBy Comma-delimited list of fields to sort by.
     * @param Page Page of results to return. Default: 1
     * @param PageSize Number of results to return per page. Default: 20, max: 100.
     * @param Filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     */
    public listV1buyersbuyerIDaddresses (BuyerID: string, Search?: string, SearchOn?: string, SortBy?: string, Page?: number, PageSize?: number, Filters?: any) : Promise<{ response: http.ClientResponse; body: ListAddress;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling listV1buyersbuyerIDaddresses.');
        }

        if (Search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(Search, "string");
        }

        if (SearchOn !== undefined) {
            localVarQueryParameters['searchOn'] = ObjectSerializer.serialize(SearchOn, "string");
        }

        if (SortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(SortBy, "string");
        }

        if (Page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(Page, "number");
        }

        if (PageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(PageSize, "number");
        }

        if (Filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(Filters, "any");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ListAddress;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ListAddress");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressID ID of the address.
     * @param Address 
     */
    public patchV1buyersbuyerIDaddressesaddressID (BuyerID: string, AddressID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Address;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/{addressID}'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)))
            .replace('{' + 'addressID' + '}', encodeURIComponent(String(AddressID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling patchV1buyersbuyerIDaddressesaddressID.');
        }

        // verify required parameter 'AddressID' is not null or undefined
        if (AddressID === null || AddressID === undefined) {
            throw new Error('Required parameter AddressID was null or undefined when calling patchV1buyersbuyerIDaddressesaddressID.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling patchV1buyersbuyerIDaddressesaddressID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Address;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Address");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressAssignment 
     */
    public saveAssignmentV1buyersbuyerIDaddressesassignments (BuyerID: string, AddressAssignment: AddressAssignment) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/assignments'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling saveAssignmentV1buyersbuyerIDaddressesassignments.');
        }

        // verify required parameter 'AddressAssignment' is not null or undefined
        if (AddressAssignment === null || AddressAssignment === undefined) {
            throw new Error('Required parameter AddressAssignment was null or undefined when calling saveAssignmentV1buyersbuyerIDaddressesassignments.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(AddressAssignment, "AddressAssignment")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param BuyerID ID of the buyer.
     * @param AddressID ID of the address.
     * @param Address 
     */
    public saveV1buyersbuyerIDaddressesaddressID (BuyerID: string, AddressID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Address;  }> {
        const localVarPath = this.basePath + '/buyers/{buyerID}/addresses/{addressID}'
            .replace('{' + 'buyerID' + '}', encodeURIComponent(String(BuyerID)))
            .replace('{' + 'addressID' + '}', encodeURIComponent(String(AddressID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'BuyerID' is not null or undefined
        if (BuyerID === null || BuyerID === undefined) {
            throw new Error('Required parameter BuyerID was null or undefined when calling saveV1buyersbuyerIDaddressesaddressID.');
        }

        // verify required parameter 'AddressID' is not null or undefined
        if (AddressID === null || AddressID === undefined) {
            throw new Error('Required parameter AddressID was null or undefined when calling saveV1buyersbuyerIDaddressesaddressID.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling saveV1buyersbuyerIDaddressesaddressID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Address;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Address");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
