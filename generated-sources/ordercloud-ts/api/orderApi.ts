/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */
import { Address } from '../model/address';
import { ListOrder } from '../model/listOrder';
import { ListOrderApproval } from '../model/listOrderApproval';
import { ListOrderPromotion } from '../model/listOrderPromotion';
import { ListUser } from '../model/listUser';
import { Order } from '../model/order';
import { OrderApprovalInfo } from '../model/orderApprovalInfo';
import { OrderPromotion } from '../model/orderPromotion';
import { Shipment } from '../model/shipment';
import { User } from '../model/user';

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'https://api.ordercloud.io/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum OrderApiApiKeys {
}

export class OrderApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'OAuth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: OrderApiApiKeys, value: string) {
        (this.authentications as any)[OrderApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.OAuth2.accessToken = token;
    }

    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param PromoCode Promo code of the order promotion.
     */
    public addPromotionV1ordersdirectionorderIDpromotionspromoCode (Direction: string, OrderID: string, PromoCode: string) : Promise<{ response: http.ClientResponse; body: OrderPromotion;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/promotions/{promoCode}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)))
            .replace('{' + 'promoCode' + '}', encodeURIComponent(String(PromoCode)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling addPromotionV1ordersdirectionorderIDpromotionspromoCode.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling addPromotionV1ordersdirectionorderIDpromotionspromoCode.');
        }

        // verify required parameter 'PromoCode' is not null or undefined
        if (PromoCode === null || PromoCode === undefined) {
            throw new Error('Required parameter PromoCode was null or undefined when calling addPromotionV1ordersdirectionorderIDpromotionspromoCode.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OrderPromotion;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OrderPromotion");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param OrderApprovalInfo 
     */
    public approveV1ordersdirectionorderIDapprove (Direction: string, OrderID: string, OrderApprovalInfo: OrderApprovalInfo) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/approve'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling approveV1ordersdirectionorderIDapprove.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling approveV1ordersdirectionorderIDapprove.');
        }

        // verify required parameter 'OrderApprovalInfo' is not null or undefined
        if (OrderApprovalInfo === null || OrderApprovalInfo === undefined) {
            throw new Error('Required parameter OrderApprovalInfo was null or undefined when calling approveV1ordersdirectionorderIDapprove.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(OrderApprovalInfo, "OrderApprovalInfo")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     */
    public cancelV1ordersdirectionorderIDcancel (Direction: string, OrderID: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/cancel'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling cancelV1ordersdirectionorderIDcancel.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling cancelV1ordersdirectionorderIDcancel.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param Order 
     */
    public createV1ordersdirection (Direction: string, Order: Order) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling createV1ordersdirection.');
        }

        // verify required parameter 'Order' is not null or undefined
        if (Order === null || Order === undefined) {
            throw new Error('Required parameter Order was null or undefined when calling createV1ordersdirection.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Order, "Order")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param OrderApprovalInfo 
     */
    public declineV1ordersdirectionorderIDdecline (Direction: string, OrderID: string, OrderApprovalInfo: OrderApprovalInfo) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/decline'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling declineV1ordersdirectionorderIDdecline.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling declineV1ordersdirectionorderIDdecline.');
        }

        // verify required parameter 'OrderApprovalInfo' is not null or undefined
        if (OrderApprovalInfo === null || OrderApprovalInfo === undefined) {
            throw new Error('Required parameter OrderApprovalInfo was null or undefined when calling declineV1ordersdirectionorderIDdecline.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(OrderApprovalInfo, "OrderApprovalInfo")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     */
    public deleteV1ordersdirectionorderID (Direction: string, OrderID: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling deleteV1ordersdirectionorderID.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling deleteV1ordersdirectionorderID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     */
    public getV1ordersdirectionorderID (Direction: string, OrderID: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling getV1ordersdirectionorderID.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling getV1ordersdirectionorderID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Search Word or phrase to search for.
     * @param SearchOn Comma-delimited list of fields to search on.
     * @param SortBy Comma-delimited list of fields to sort by.
     * @param Page Page of results to return. Default: 1
     * @param PageSize Number of results to return per page. Default: 20, max: 100.
     * @param Filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     */
    public listApprovalsV1ordersdirectionorderIDapprovals (Direction: string, OrderID: string, Search?: string, SearchOn?: string, SortBy?: string, Page?: number, PageSize?: number, Filters?: any) : Promise<{ response: http.ClientResponse; body: ListOrderApproval;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/approvals'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling listApprovalsV1ordersdirectionorderIDapprovals.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling listApprovalsV1ordersdirectionorderIDapprovals.');
        }

        if (Search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(Search, "string");
        }

        if (SearchOn !== undefined) {
            localVarQueryParameters['searchOn'] = ObjectSerializer.serialize(SearchOn, "string");
        }

        if (SortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(SortBy, "string");
        }

        if (Page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(Page, "number");
        }

        if (PageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(PageSize, "number");
        }

        if (Filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(Filters, "any");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ListOrderApproval;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ListOrderApproval");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Search Word or phrase to search for.
     * @param SearchOn Comma-delimited list of fields to search on.
     * @param SortBy Comma-delimited list of fields to sort by.
     * @param Page Page of results to return. Default: 1
     * @param PageSize Number of results to return per page. Default: 20, max: 100.
     * @param Filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     */
    public listEligibleApproversV1ordersdirectionorderIDeligibleapprovers (Direction: string, OrderID: string, Search?: string, SearchOn?: string, SortBy?: string, Page?: number, PageSize?: number, Filters?: any) : Promise<{ response: http.ClientResponse; body: ListUser;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/eligibleapprovers'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling listEligibleApproversV1ordersdirectionorderIDeligibleapprovers.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling listEligibleApproversV1ordersdirectionorderIDeligibleapprovers.');
        }

        if (Search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(Search, "string");
        }

        if (SearchOn !== undefined) {
            localVarQueryParameters['searchOn'] = ObjectSerializer.serialize(SearchOn, "string");
        }

        if (SortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(SortBy, "string");
        }

        if (Page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(Page, "number");
        }

        if (PageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(PageSize, "number");
        }

        if (Filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(Filters, "any");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ListUser;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ListUser");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Search Word or phrase to search for.
     * @param SearchOn Comma-delimited list of fields to search on.
     * @param SortBy Comma-delimited list of fields to sort by.
     * @param Page Page of results to return. Default: 1
     * @param PageSize Number of results to return per page. Default: 20, max: 100.
     * @param Filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     */
    public listPromotionsV1ordersdirectionorderIDpromotions (Direction: string, OrderID: string, Search?: string, SearchOn?: string, SortBy?: string, Page?: number, PageSize?: number, Filters?: any) : Promise<{ response: http.ClientResponse; body: ListOrderPromotion;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/promotions'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling listPromotionsV1ordersdirectionorderIDpromotions.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling listPromotionsV1ordersdirectionorderIDpromotions.');
        }

        if (Search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(Search, "string");
        }

        if (SearchOn !== undefined) {
            localVarQueryParameters['searchOn'] = ObjectSerializer.serialize(SearchOn, "string");
        }

        if (SortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(SortBy, "string");
        }

        if (Page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(Page, "number");
        }

        if (PageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(PageSize, "number");
        }

        if (Filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(Filters, "any");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ListOrderPromotion;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ListOrderPromotion");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param BuyerID ID of the buyer.
     * @param SupplierID ID of the supplier.
     * @param From Lower bound of date range that the order was created.
     * @param To Upper bound of date range that the order was created.
     * @param Search Word or phrase to search for.
     * @param SearchOn Comma-delimited list of fields to search on.
     * @param SortBy Comma-delimited list of fields to sort by.
     * @param Page Page of results to return. Default: 1
     * @param PageSize Number of results to return per page. Default: 20, max: 100.
     * @param Filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     */
    public listV1ordersdirection (Direction: string, BuyerID?: string, SupplierID?: string, From?: string, To?: string, Search?: string, SearchOn?: string, SortBy?: string, Page?: number, PageSize?: number, Filters?: any) : Promise<{ response: http.ClientResponse; body: ListOrder;  }> {
        const localVarPath = this.basePath + '/orders/{direction}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling listV1ordersdirection.');
        }

        if (BuyerID !== undefined) {
            localVarQueryParameters['buyerID'] = ObjectSerializer.serialize(BuyerID, "string");
        }

        if (SupplierID !== undefined) {
            localVarQueryParameters['supplierID'] = ObjectSerializer.serialize(SupplierID, "string");
        }

        if (From !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(From, "string");
        }

        if (To !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(To, "string");
        }

        if (Search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(Search, "string");
        }

        if (SearchOn !== undefined) {
            localVarQueryParameters['searchOn'] = ObjectSerializer.serialize(SearchOn, "string");
        }

        if (SortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(SortBy, "string");
        }

        if (Page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(Page, "number");
        }

        if (PageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(PageSize, "number");
        }

        if (Filters !== undefined) {
            localVarQueryParameters['filters'] = ObjectSerializer.serialize(Filters, "any");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ListOrder;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ListOrder");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Address 
     */
    public patchBillingAddressV1ordersdirectionorderIDbillto (Direction: string, OrderID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/billto'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling patchBillingAddressV1ordersdirectionorderIDbillto.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling patchBillingAddressV1ordersdirectionorderIDbillto.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling patchBillingAddressV1ordersdirectionorderIDbillto.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param User 
     */
    public patchFromUserV1ordersdirectionorderIDfromuser (Direction: string, OrderID: string, User: User) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/fromuser'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling patchFromUserV1ordersdirectionorderIDfromuser.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling patchFromUserV1ordersdirectionorderIDfromuser.');
        }

        // verify required parameter 'User' is not null or undefined
        if (User === null || User === undefined) {
            throw new Error('Required parameter User was null or undefined when calling patchFromUserV1ordersdirectionorderIDfromuser.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(User, "User")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Address 
     */
    public patchShippingAddressV1ordersdirectionorderIDshipto (Direction: string, OrderID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/shipto'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling patchShippingAddressV1ordersdirectionorderIDshipto.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling patchShippingAddressV1ordersdirectionorderIDshipto.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling patchShippingAddressV1ordersdirectionorderIDshipto.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Order 
     */
    public patchV1ordersdirectionorderID (Direction: string, OrderID: string, Order: Order) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling patchV1ordersdirectionorderID.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling patchV1ordersdirectionorderID.');
        }

        // verify required parameter 'Order' is not null or undefined
        if (Order === null || Order === undefined) {
            throw new Error('Required parameter Order was null or undefined when calling patchV1ordersdirectionorderID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Order, "Order")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param PromoCode Promo code of the order.
     */
    public removePromotionV1ordersdirectionorderIDpromotionspromoCode (Direction: string, OrderID: string, PromoCode: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/promotions/{promoCode}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)))
            .replace('{' + 'promoCode' + '}', encodeURIComponent(String(PromoCode)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling removePromotionV1ordersdirectionorderIDpromotionspromoCode.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling removePromotionV1ordersdirectionorderIDpromotionspromoCode.');
        }

        // verify required parameter 'PromoCode' is not null or undefined
        if (PromoCode === null || PromoCode === undefined) {
            throw new Error('Required parameter PromoCode was null or undefined when calling removePromotionV1ordersdirectionorderIDpromotionspromoCode.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Order 
     */
    public saveV1ordersdirectionorderID (Direction: string, OrderID: string, Order: Order) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling saveV1ordersdirectionorderID.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling saveV1ordersdirectionorderID.');
        }

        // verify required parameter 'Order' is not null or undefined
        if (Order === null || Order === undefined) {
            throw new Error('Required parameter Order was null or undefined when calling saveV1ordersdirectionorderID.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Order, "Order")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Address 
     */
    public setBillingAddressV1ordersdirectionorderIDbillto (Direction: string, OrderID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/billto'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling setBillingAddressV1ordersdirectionorderIDbillto.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling setBillingAddressV1ordersdirectionorderIDbillto.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling setBillingAddressV1ordersdirectionorderIDbillto.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Address 
     */
    public setShippingAddressV1ordersdirectionorderIDshipto (Direction: string, OrderID: string, Address: Address) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/shipto'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling setShippingAddressV1ordersdirectionorderIDshipto.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling setShippingAddressV1ordersdirectionorderIDshipto.');
        }

        // verify required parameter 'Address' is not null or undefined
        if (Address === null || Address === undefined) {
            throw new Error('Required parameter Address was null or undefined when calling setShippingAddressV1ordersdirectionorderIDshipto.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Address, "Address")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     * @param Shipment 
     */
    public shipV1ordersdirectionorderIDship (Direction: string, OrderID: string, Shipment: Shipment) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/ship'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling shipV1ordersdirectionorderIDship.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling shipV1ordersdirectionorderIDship.');
        }

        // verify required parameter 'Shipment' is not null or undefined
        if (Shipment === null || Shipment === undefined) {
            throw new Error('Required parameter Shipment was null or undefined when calling shipV1ordersdirectionorderIDship.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(Shipment, "Shipment")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param Direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param OrderID ID of the order.
     */
    public submitV1ordersdirectionorderIDsubmit (Direction: string, OrderID: string) : Promise<{ response: http.ClientResponse; body: Order;  }> {
        const localVarPath = this.basePath + '/orders/{direction}/{orderID}/submit'
            .replace('{' + 'direction' + '}', encodeURIComponent(String(Direction)))
            .replace('{' + 'orderID' + '}', encodeURIComponent(String(OrderID)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'Direction' is not null or undefined
        if (Direction === null || Direction === undefined) {
            throw new Error('Required parameter Direction was null or undefined when calling submitV1ordersdirectionorderIDsubmit.');
        }

        // verify required parameter 'OrderID' is not null or undefined
        if (OrderID === null || OrderID === undefined) {
            throw new Error('Required parameter OrderID was null or undefined when calling submitV1ordersdirectionorderIDsubmit.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Order;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Order");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
