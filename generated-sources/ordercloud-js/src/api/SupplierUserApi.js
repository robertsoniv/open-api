/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessToken', 'model/ImpersonateTokenRequest', 'model/ListUser', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessToken'), require('../model/ImpersonateTokenRequest'), require('../model/ListUser'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.SupplierUserApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.AccessToken, root.OrderCloud.ImpersonateTokenRequest, root.OrderCloud.ListUser, root.OrderCloud.User);
  }
}(this, function(ApiClient, AccessToken, ImpersonateTokenRequest, ListUser, User) {
  'use strict';

  /**
   * SupplierUser service.
   * @module api/SupplierUserApi
   * @version 1.0.89
   */

  /**
   * Constructs a new SupplierUserApi. 
   * @alias module:api/SupplierUserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createV1supplierssupplierIDusers operation.
     * @callback module:api/SupplierUserApi~createV1supplierssupplierIDusersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {module:model/User} user 
     * @param {module:api/SupplierUserApi~createV1supplierssupplierIDusersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.createV1supplierssupplierIDusers = function(supplierID, user, callback) {
      var postBody = user;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling createV1supplierssupplierIDusers");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createV1supplierssupplierIDusers");
      }


      var pathParams = {
        'supplierID': supplierID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1supplierssupplierIDusersuserID operation.
     * @callback module:api/SupplierUserApi~deleteV1supplierssupplierIDusersuserIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userID ID of the user.
     * @param {module:api/SupplierUserApi~deleteV1supplierssupplierIDusersuserIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteV1supplierssupplierIDusersuserID = function(supplierID, userID, callback) {
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling deleteV1supplierssupplierIDusersuserID");
      }

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteV1supplierssupplierIDusersuserID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users/{userID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessTokenV1supplierssupplierIDusersuserIDaccesstoken operation.
     * @callback module:api/SupplierUserApi~getAccessTokenV1supplierssupplierIDusersuserIDaccesstokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userID ID of the user.
     * @param {module:model/ImpersonateTokenRequest} impersonateTokenRequest 
     * @param {module:api/SupplierUserApi~getAccessTokenV1supplierssupplierIDusersuserIDaccesstokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.getAccessTokenV1supplierssupplierIDusersuserIDaccesstoken = function(supplierID, userID, impersonateTokenRequest, callback) {
      var postBody = impersonateTokenRequest;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling getAccessTokenV1supplierssupplierIDusersuserIDaccesstoken");
      }

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling getAccessTokenV1supplierssupplierIDusersuserIDaccesstoken");
      }

      // verify the required parameter 'impersonateTokenRequest' is set
      if (impersonateTokenRequest === undefined || impersonateTokenRequest === null) {
        throw new Error("Missing the required parameter 'impersonateTokenRequest' when calling getAccessTokenV1supplierssupplierIDusersuserIDaccesstoken");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users/{userID}/accesstoken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1supplierssupplierIDusersuserID operation.
     * @callback module:api/SupplierUserApi~getV1supplierssupplierIDusersuserIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userID ID of the user.
     * @param {module:api/SupplierUserApi~getV1supplierssupplierIDusersuserIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getV1supplierssupplierIDusersuserID = function(supplierID, userID, callback) {
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling getV1supplierssupplierIDusersuserID");
      }

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling getV1supplierssupplierIDusersuserID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users/{userID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listV1supplierssupplierIDusers operation.
     * @callback module:api/SupplierUserApi~listV1supplierssupplierIDusersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SupplierUserApi~listV1supplierssupplierIDusersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUser}
     */
    this.listV1supplierssupplierIDusers = function(supplierID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling listV1supplierssupplierIDusers");
      }


      var pathParams = {
        'supplierID': supplierID
      };
      var queryParams = {
        'userGroupID': opts['userGroupID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListUser;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchV1supplierssupplierIDusersuserID operation.
     * @callback module:api/SupplierUserApi~patchV1supplierssupplierIDusersuserIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userID ID of the user.
     * @param {module:model/User} user 
     * @param {module:api/SupplierUserApi~patchV1supplierssupplierIDusersuserIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.patchV1supplierssupplierIDusersuserID = function(supplierID, userID, user, callback) {
      var postBody = user;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling patchV1supplierssupplierIDusersuserID");
      }

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling patchV1supplierssupplierIDusersuserID");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling patchV1supplierssupplierIDusersuserID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users/{userID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveV1supplierssupplierIDusersuserID operation.
     * @callback module:api/SupplierUserApi~saveV1supplierssupplierIDusersuserIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userID ID of the user.
     * @param {module:model/User} user 
     * @param {module:api/SupplierUserApi~saveV1supplierssupplierIDusersuserIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.saveV1supplierssupplierIDusersuserID = function(supplierID, userID, user, callback) {
      var postBody = user;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling saveV1supplierssupplierIDusersuserID");
      }

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling saveV1supplierssupplierIDusersuserID");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling saveV1supplierssupplierIDusersuserID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/users/{userID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
