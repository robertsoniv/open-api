/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListSpec', 'model/ListSpecOption', 'model/ListSpecProductAssignment', 'model/Spec', 'model/SpecOption', 'model/SpecProductAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListSpec'), require('../model/ListSpecOption'), require('../model/ListSpecProductAssignment'), require('../model/Spec'), require('../model/SpecOption'), require('../model/SpecProductAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.SpecApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.ListSpec, root.OrderCloud.ListSpecOption, root.OrderCloud.ListSpecProductAssignment, root.OrderCloud.Spec, root.OrderCloud.SpecOption, root.OrderCloud.SpecProductAssignment);
  }
}(this, function(ApiClient, ListSpec, ListSpecOption, ListSpecProductAssignment, Spec, SpecOption, SpecProductAssignment) {
  'use strict';

  /**
   * Spec service.
   * @module api/SpecApi
   * @version 1.0.89
   */

  /**
   * Constructs a new SpecApi. 
   * @alias module:api/SpecApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOptionV1specsspecIDoptions operation.
     * @callback module:api/SpecApi~createOptionV1specsspecIDoptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/SpecOption} specOption 
     * @param {module:api/SpecApi~createOptionV1specsspecIDoptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.createOptionV1specsspecIDoptions = function(specID, specOption, callback) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling createOptionV1specsspecIDoptions");
      }

      // verify the required parameter 'specOption' is set
      if (specOption === undefined || specOption === null) {
        throw new Error("Missing the required parameter 'specOption' when calling createOptionV1specsspecIDoptions");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createV1specs operation.
     * @callback module:api/SpecApi~createV1specsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~createV1specsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.createV1specs = function(spec, callback) {
      var postBody = spec;

      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling createV1specs");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionV1specsspecIDoptionsoptionID operation.
     * @callback module:api/SpecApi~deleteOptionV1specsspecIDoptionsoptionIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:api/SpecApi~deleteOptionV1specsspecIDoptionsoptionIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOptionV1specsspecIDoptionsoptionID = function(specID, optionID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteOptionV1specsspecIDoptionsoptionID");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling deleteOptionV1specsspecIDoptionsoptionID");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductAssignmentV1specsspecIDproductassignmentsproductID operation.
     * @callback module:api/SpecApi~deleteProductAssignmentV1specsspecIDproductassignmentsproductIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} productID ID of the product.
     * @param {module:api/SpecApi~deleteProductAssignmentV1specsspecIDproductassignmentsproductIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductAssignmentV1specsspecIDproductassignmentsproductID = function(specID, productID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteProductAssignmentV1specsspecIDproductassignmentsproductID");
      }

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProductAssignmentV1specsspecIDproductassignmentsproductID");
      }


      var pathParams = {
        'specID': specID,
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}/productassignments/{productID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1specsspecID operation.
     * @callback module:api/SpecApi~deleteV1specsspecIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:api/SpecApi~deleteV1specsspecIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteV1specsspecID = function(specID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteV1specsspecID");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionV1specsspecIDoptionsoptionID operation.
     * @callback module:api/SpecApi~getOptionV1specsspecIDoptionsoptionIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:api/SpecApi~getOptionV1specsspecIDoptionsoptionIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.getOptionV1specsspecIDoptionsoptionID = function(specID, optionID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling getOptionV1specsspecIDoptionsoptionID");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling getOptionV1specsspecIDoptionsoptionID");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1specsspecID operation.
     * @callback module:api/SpecApi~getV1specsspecIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:api/SpecApi~getV1specsspecIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.getV1specsspecID = function(specID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling getV1specsspecID");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsV1specsspecIDoptions operation.
     * @callback module:api/SpecApi~listOptionsV1specsspecIDoptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listOptionsV1specsspecIDoptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpecOption}
     */
    this.listOptionsV1specsspecIDoptions = function(specID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling listOptionsV1specsspecIDoptions");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductAssignmentsV1specsproductassignments operation.
     * @callback module:api/SpecApi~listProductAssignmentsV1specsproductassignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpecProductAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listProductAssignmentsV1specsproductassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpecProductAssignment}
     */
    this.listProductAssignmentsV1specsproductassignments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpecProductAssignment;

      return this.apiClient.callApi(
        '/specs/productassignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listV1specs operation.
     * @callback module:api/SpecApi~listV1specsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listV1specsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpec}
     */
    this.listV1specs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpec;

      return this.apiClient.callApi(
        '/specs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOptionV1specsspecIDoptionsoptionID operation.
     * @callback module:api/SpecApi~patchOptionV1specsspecIDoptionsoptionIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} specOption 
     * @param {module:api/SpecApi~patchOptionV1specsspecIDoptionsoptionIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.patchOptionV1specsspecIDoptionsoptionID = function(specID, optionID, specOption, callback) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling patchOptionV1specsspecIDoptionsoptionID");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling patchOptionV1specsspecIDoptionsoptionID");
      }

      // verify the required parameter 'specOption' is set
      if (specOption === undefined || specOption === null) {
        throw new Error("Missing the required parameter 'specOption' when calling patchOptionV1specsspecIDoptionsoptionID");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchV1specsspecID operation.
     * @callback module:api/SpecApi~patchV1specsspecIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~patchV1specsspecIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.patchV1specsspecID = function(specID, spec, callback) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling patchV1specsspecID");
      }

      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling patchV1specsspecID");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveOptionV1specsspecIDoptionsoptionID operation.
     * @callback module:api/SpecApi~saveOptionV1specsspecIDoptionsoptionIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} specOption 
     * @param {module:api/SpecApi~saveOptionV1specsspecIDoptionsoptionIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.saveOptionV1specsspecIDoptionsoptionID = function(specID, optionID, specOption, callback) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling saveOptionV1specsspecIDoptionsoptionID");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling saveOptionV1specsspecIDoptionsoptionID");
      }

      // verify the required parameter 'specOption' is set
      if (specOption === undefined || specOption === null) {
        throw new Error("Missing the required parameter 'specOption' when calling saveOptionV1specsspecIDoptionsoptionID");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProductAssignmentV1specsproductassignments operation.
     * @callback module:api/SpecApi~saveProductAssignmentV1specsproductassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SpecProductAssignment} specProductAssignment 
     * @param {module:api/SpecApi~saveProductAssignmentV1specsproductassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveProductAssignmentV1specsproductassignments = function(specProductAssignment, callback) {
      var postBody = specProductAssignment;

      // verify the required parameter 'specProductAssignment' is set
      if (specProductAssignment === undefined || specProductAssignment === null) {
        throw new Error("Missing the required parameter 'specProductAssignment' when calling saveProductAssignmentV1specsproductassignments");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/productassignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveV1specsspecID operation.
     * @callback module:api/SpecApi~saveV1specsspecIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~saveV1specsspecIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.saveV1specsspecID = function(specID, spec, callback) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling saveV1specsspecID");
      }

      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling saveV1specsspecID");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
