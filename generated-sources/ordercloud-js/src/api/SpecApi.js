/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListSpec', 'model/ListSpecOption', 'model/ListSpecProductAssignment', 'model/Spec', 'model/SpecOption', 'model/SpecProductAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListSpec'), require('../model/ListSpecOption'), require('../model/ListSpecProductAssignment'), require('../model/Spec'), require('../model/SpecOption'), require('../model/SpecProductAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.SpecApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.ListSpec, root.OrderCloud.ListSpecOption, root.OrderCloud.ListSpecProductAssignment, root.OrderCloud.Spec, root.OrderCloud.SpecOption, root.OrderCloud.SpecProductAssignment);
  }
}(this, function(ApiClient, ListSpec, ListSpecOption, ListSpecProductAssignment, Spec, SpecOption, SpecProductAssignment) {
  'use strict';

  /**
   * Spec service.
   * @module api/SpecApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SpecApi. 
   * @alias module:api/SpecApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOptionSpecs operation.
     * @callback module:api/SpecApi~createOptionSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/SpecOption} specOption 
     * @param {module:api/SpecApi~createOptionSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.createOptionSpecs = function(specID, specOption, callback) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling createOptionSpecs");
      }

      // verify the required parameter 'specOption' is set
      if (specOption === undefined || specOption === null) {
        throw new Error("Missing the required parameter 'specOption' when calling createOptionSpecs");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpecs operation.
     * @callback module:api/SpecApi~createSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~createSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.createSpecs = function(spec, callback) {
      var postBody = spec;

      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling createSpecs");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionSpecs operation.
     * @callback module:api/SpecApi~deleteOptionSpecsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:api/SpecApi~deleteOptionSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOptionSpecs = function(specID, optionID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteOptionSpecs");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling deleteOptionSpecs");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductAssignmentSpecs operation.
     * @callback module:api/SpecApi~deleteProductAssignmentSpecsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} productID ID of the product.
     * @param {module:api/SpecApi~deleteProductAssignmentSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductAssignmentSpecs = function(specID, productID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteProductAssignmentSpecs");
      }

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProductAssignmentSpecs");
      }


      var pathParams = {
        'specID': specID,
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}/productassignments/{productID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpecs operation.
     * @callback module:api/SpecApi~deleteSpecsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:api/SpecApi~deleteSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSpecs = function(specID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling deleteSpecs");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/{specID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOptionSpecs operation.
     * @callback module:api/SpecApi~getOptionSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:api/SpecApi~getOptionSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.getOptionSpecs = function(specID, optionID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling getOptionSpecs");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling getOptionSpecs");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecs operation.
     * @callback module:api/SpecApi~getSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:api/SpecApi~getSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.getSpecs = function(specID, callback) {
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling getSpecs");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOptionsSpecs operation.
     * @callback module:api/SpecApi~listOptionsSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listOptionsSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpecOption}
     */
    this.listOptionsSpecs = function(specID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling listOptionsSpecs");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductAssignmentsSpecs operation.
     * @callback module:api/SpecApi~listProductAssignmentsSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpecProductAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listProductAssignmentsSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpecProductAssignment}
     */
    this.listProductAssignmentsSpecs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpecProductAssignment;

      return this.apiClient.callApi(
        '/specs/productassignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpecs operation.
     * @callback module:api/SpecApi~listSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpecApi~listSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpec}
     */
    this.listSpecs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpec;

      return this.apiClient.callApi(
        '/specs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOptionSpecs operation.
     * @callback module:api/SpecApi~patchOptionSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} specOption 
     * @param {module:api/SpecApi~patchOptionSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.patchOptionSpecs = function(specID, optionID, specOption, callback) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling patchOptionSpecs");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling patchOptionSpecs");
      }

      // verify the required parameter 'specOption' is set
      if (specOption === undefined || specOption === null) {
        throw new Error("Missing the required parameter 'specOption' when calling patchOptionSpecs");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchSpecs operation.
     * @callback module:api/SpecApi~patchSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~patchSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.patchSpecs = function(specID, spec, callback) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling patchSpecs");
      }

      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling patchSpecs");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveOptionSpecs operation.
     * @callback module:api/SpecApi~saveOptionSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {String} optionID ID of the option.
     * @param {module:model/SpecOption} specOption 
     * @param {module:api/SpecApi~saveOptionSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecOption}
     */
    this.saveOptionSpecs = function(specID, optionID, specOption, callback) {
      var postBody = specOption;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling saveOptionSpecs");
      }

      // verify the required parameter 'optionID' is set
      if (optionID === undefined || optionID === null) {
        throw new Error("Missing the required parameter 'optionID' when calling saveOptionSpecs");
      }

      // verify the required parameter 'specOption' is set
      if (specOption === undefined || specOption === null) {
        throw new Error("Missing the required parameter 'specOption' when calling saveOptionSpecs");
      }


      var pathParams = {
        'specID': specID,
        'optionID': optionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecOption;

      return this.apiClient.callApi(
        '/specs/{specID}/options/{optionID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProductAssignmentSpecs operation.
     * @callback module:api/SpecApi~saveProductAssignmentSpecsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SpecProductAssignment} specProductAssignment 
     * @param {module:api/SpecApi~saveProductAssignmentSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveProductAssignmentSpecs = function(specProductAssignment, callback) {
      var postBody = specProductAssignment;

      // verify the required parameter 'specProductAssignment' is set
      if (specProductAssignment === undefined || specProductAssignment === null) {
        throw new Error("Missing the required parameter 'specProductAssignment' when calling saveProductAssignmentSpecs");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/specs/productassignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSpecs operation.
     * @callback module:api/SpecApi~saveSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} specID ID of the spec.
     * @param {module:model/Spec} spec 
     * @param {module:api/SpecApi~saveSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spec}
     */
    this.saveSpecs = function(specID, spec, callback) {
      var postBody = spec;

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling saveSpecs");
      }

      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling saveSpecs");
      }


      var pathParams = {
        'specID': specID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spec;

      return this.apiClient.callApi(
        '/specs/{specID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
