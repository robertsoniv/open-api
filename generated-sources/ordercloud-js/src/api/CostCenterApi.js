/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CostCenter', 'model/CostCenterAssignment', 'model/ListCostCenter', 'model/ListCostCenterAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CostCenter'), require('../model/CostCenterAssignment'), require('../model/ListCostCenter'), require('../model/ListCostCenterAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.CostCenterApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.CostCenter, root.OrderCloud.CostCenterAssignment, root.OrderCloud.ListCostCenter, root.OrderCloud.ListCostCenterAssignment);
  }
}(this, function(ApiClient, CostCenter, CostCenterAssignment, ListCostCenter, ListCostCenterAssignment) {
  'use strict';

  /**
   * CostCenter service.
   * @module api/CostCenterApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CostCenterApi. 
   * @alias module:api/CostCenterApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCostCenters operation.
     * @callback module:api/CostCenterApi~createCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/CostCenter} costCenter 
     * @param {module:api/CostCenterApi~createCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostCenter}
     */
    this.createCostCenters = function(buyerID, costCenter, callback) {
      var postBody = costCenter;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling createCostCenters");
      }

      // verify the required parameter 'costCenter' is set
      if (costCenter === undefined || costCenter === null) {
        throw new Error("Missing the required parameter 'costCenter' when calling createCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CostCenter;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssignmentCostCenters operation.
     * @callback module:api/CostCenterApi~deleteAssignmentCostCentersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} costCenterID ID of the cost center.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {module:api/CostCenterApi~deleteAssignmentCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssignmentCostCenters = function(buyerID, costCenterID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteAssignmentCostCenters");
      }

      // verify the required parameter 'costCenterID' is set
      if (costCenterID === undefined || costCenterID === null) {
        throw new Error("Missing the required parameter 'costCenterID' when calling deleteAssignmentCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID,
        'costCenterID': costCenterID
      };
      var queryParams = {
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/{costCenterID}/assignments', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCostCenters operation.
     * @callback module:api/CostCenterApi~deleteCostCentersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} costCenterID ID of the cost center.
     * @param {module:api/CostCenterApi~deleteCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCostCenters = function(buyerID, costCenterID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteCostCenters");
      }

      // verify the required parameter 'costCenterID' is set
      if (costCenterID === undefined || costCenterID === null) {
        throw new Error("Missing the required parameter 'costCenterID' when calling deleteCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID,
        'costCenterID': costCenterID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/{costCenterID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCostCenters operation.
     * @callback module:api/CostCenterApi~getCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} costCenterID ID of the cost center.
     * @param {module:api/CostCenterApi~getCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostCenter}
     */
    this.getCostCenters = function(buyerID, costCenterID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling getCostCenters");
      }

      // verify the required parameter 'costCenterID' is set
      if (costCenterID === undefined || costCenterID === null) {
        throw new Error("Missing the required parameter 'costCenterID' when calling getCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID,
        'costCenterID': costCenterID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CostCenter;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/{costCenterID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignmentsCostCenters operation.
     * @callback module:api/CostCenterApi~listAssignmentsCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCostCenterAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.costCenterID ID of the cost center.
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.level Level of the cost center assignment. Possible values: User, Group, Company.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/CostCenterApi~listAssignmentsCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCostCenterAssignment}
     */
    this.listAssignmentsCostCenters = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listAssignmentsCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'costCenterID': opts['costCenterID'],
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
        'level': opts['level'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCostCenterAssignment;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCostCenters operation.
     * @callback module:api/CostCenterApi~listCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/CostCenterApi~listCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCostCenter}
     */
    this.listCostCenters = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCostCenter;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCostCenters operation.
     * @callback module:api/CostCenterApi~patchCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} costCenterID ID of the cost center.
     * @param {module:model/CostCenter} costCenter 
     * @param {module:api/CostCenterApi~patchCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostCenter}
     */
    this.patchCostCenters = function(buyerID, costCenterID, costCenter, callback) {
      var postBody = costCenter;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling patchCostCenters");
      }

      // verify the required parameter 'costCenterID' is set
      if (costCenterID === undefined || costCenterID === null) {
        throw new Error("Missing the required parameter 'costCenterID' when calling patchCostCenters");
      }

      // verify the required parameter 'costCenter' is set
      if (costCenter === undefined || costCenter === null) {
        throw new Error("Missing the required parameter 'costCenter' when calling patchCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID,
        'costCenterID': costCenterID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CostCenter;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/{costCenterID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssignmentCostCenters operation.
     * @callback module:api/CostCenterApi~saveAssignmentCostCentersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/CostCenterAssignment} costCenterAssignment 
     * @param {module:api/CostCenterApi~saveAssignmentCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAssignmentCostCenters = function(buyerID, costCenterAssignment, callback) {
      var postBody = costCenterAssignment;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveAssignmentCostCenters");
      }

      // verify the required parameter 'costCenterAssignment' is set
      if (costCenterAssignment === undefined || costCenterAssignment === null) {
        throw new Error("Missing the required parameter 'costCenterAssignment' when calling saveAssignmentCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCostCenters operation.
     * @callback module:api/CostCenterApi~saveCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} costCenterID ID of the cost center.
     * @param {module:model/CostCenter} costCenter 
     * @param {module:api/CostCenterApi~saveCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostCenter}
     */
    this.saveCostCenters = function(buyerID, costCenterID, costCenter, callback) {
      var postBody = costCenter;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveCostCenters");
      }

      // verify the required parameter 'costCenterID' is set
      if (costCenterID === undefined || costCenterID === null) {
        throw new Error("Missing the required parameter 'costCenterID' when calling saveCostCenters");
      }

      // verify the required parameter 'costCenter' is set
      if (costCenter === undefined || costCenter === null) {
        throw new Error("Missing the required parameter 'costCenter' when calling saveCostCenters");
      }


      var pathParams = {
        'buyerID': buyerID,
        'costCenterID': costCenterID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CostCenter;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/costcenters/{costCenterID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
