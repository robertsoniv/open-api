/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Address', 'model/ListOrder', 'model/ListOrderApproval', 'model/ListOrderPromotion', 'model/ListUser', 'model/Order', 'model/OrderApprovalInfo', 'model/OrderPromotion', 'model/Shipment', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Address'), require('../model/ListOrder'), require('../model/ListOrderApproval'), require('../model/ListOrderPromotion'), require('../model/ListUser'), require('../model/Order'), require('../model/OrderApprovalInfo'), require('../model/OrderPromotion'), require('../model/Shipment'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.OrderApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Address, root.OrderCloud.ListOrder, root.OrderCloud.ListOrderApproval, root.OrderCloud.ListOrderPromotion, root.OrderCloud.ListUser, root.OrderCloud.Order, root.OrderCloud.OrderApprovalInfo, root.OrderCloud.OrderPromotion, root.OrderCloud.Shipment, root.OrderCloud.User);
  }
}(this, function(ApiClient, Address, ListOrder, ListOrderApproval, ListOrderPromotion, ListUser, Order, OrderApprovalInfo, OrderPromotion, Shipment, User) {
  'use strict';

  /**
   * Order service.
   * @module api/OrderApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OrderApi. 
   * @alias module:api/OrderApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPromotionOrders operation.
     * @callback module:api/OrderApi~addPromotionOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} promoCode Promo code of the order promotion.
     * @param {module:api/OrderApi~addPromotionOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderPromotion}
     */
    this.addPromotionOrders = function(direction, orderID, promoCode, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling addPromotionOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling addPromotionOrders");
      }

      // verify the required parameter 'promoCode' is set
      if (promoCode === undefined || promoCode === null) {
        throw new Error("Missing the required parameter 'promoCode' when calling addPromotionOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'promoCode': promoCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OrderPromotion;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/promotions/{promoCode}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the approveOrders operation.
     * @callback module:api/OrderApi~approveOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/OrderApprovalInfo} orderApprovalInfo 
     * @param {module:api/OrderApi~approveOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.approveOrders = function(direction, orderID, orderApprovalInfo, callback) {
      var postBody = orderApprovalInfo;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling approveOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling approveOrders");
      }

      // verify the required parameter 'orderApprovalInfo' is set
      if (orderApprovalInfo === undefined || orderApprovalInfo === null) {
        throw new Error("Missing the required parameter 'orderApprovalInfo' when calling approveOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/approve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrders operation.
     * @callback module:api/OrderApi~cancelOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:api/OrderApi~cancelOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.cancelOrders = function(direction, orderID, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling cancelOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling cancelOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrders operation.
     * @callback module:api/OrderApi~createOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {module:model/Order} order 
     * @param {module:api/OrderApi~createOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.createOrders = function(direction, order, callback) {
      var postBody = order;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling createOrders");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrders");
      }


      var pathParams = {
        'direction': direction
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the declineOrders operation.
     * @callback module:api/OrderApi~declineOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/OrderApprovalInfo} orderApprovalInfo 
     * @param {module:api/OrderApi~declineOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.declineOrders = function(direction, orderID, orderApprovalInfo, callback) {
      var postBody = orderApprovalInfo;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling declineOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling declineOrders");
      }

      // verify the required parameter 'orderApprovalInfo' is set
      if (orderApprovalInfo === undefined || orderApprovalInfo === null) {
        throw new Error("Missing the required parameter 'orderApprovalInfo' when calling declineOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/decline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrders operation.
     * @callback module:api/OrderApi~deleteOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:api/OrderApi~deleteOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrders = function(direction, orderID, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling deleteOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling deleteOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrders operation.
     * @callback module:api/OrderApi~getOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:api/OrderApi~getOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.getOrders = function(direction, orderID, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling getOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling getOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listApprovalsOrders operation.
     * @callback module:api/OrderApi~listApprovalsOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrderApproval} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/OrderApi~listApprovalsOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrderApproval}
     */
    this.listApprovalsOrders = function(direction, orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling listApprovalsOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling listApprovalsOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrderApproval;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/approvals', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listEligibleApproversOrders operation.
     * @callback module:api/OrderApi~listEligibleApproversOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/OrderApi~listEligibleApproversOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUser}
     */
    this.listEligibleApproversOrders = function(direction, orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling listEligibleApproversOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling listEligibleApproversOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListUser;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/eligibleapprovers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/OrderApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {Object} opts Optional parameters
     * @param {String} opts.buyerID ID of the buyer.
     * @param {String} opts.supplierID ID of the supplier.
     * @param {String} opts.from Lower bound of date range that the order was created.
     * @param {String} opts.to Upper bound of date range that the order was created.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/OrderApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrder}
     */
    this.listOrders = function(direction, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling listOrders");
      }


      var pathParams = {
        'direction': direction
      };
      var queryParams = {
        'buyerID': opts['buyerID'],
        'supplierID': opts['supplierID'],
        'from': opts['from'],
        'to': opts['to'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrder;

      return this.apiClient.callApi(
        '/orders/{direction}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPromotionsOrders operation.
     * @callback module:api/OrderApi~listPromotionsOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrderPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/OrderApi~listPromotionsOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrderPromotion}
     */
    this.listPromotionsOrders = function(direction, orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling listPromotionsOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling listPromotionsOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrderPromotion;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/promotions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBillingAddressOrders operation.
     * @callback module:api/OrderApi~patchBillingAddressOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Address} address 
     * @param {module:api/OrderApi~patchBillingAddressOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.patchBillingAddressOrders = function(direction, orderID, address, callback) {
      var postBody = address;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling patchBillingAddressOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling patchBillingAddressOrders");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling patchBillingAddressOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/billto', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFromUserOrders operation.
     * @callback module:api/OrderApi~patchFromUserOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/User} user 
     * @param {module:api/OrderApi~patchFromUserOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.patchFromUserOrders = function(direction, orderID, user, callback) {
      var postBody = user;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling patchFromUserOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling patchFromUserOrders");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling patchFromUserOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/fromuser', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrders operation.
     * @callback module:api/OrderApi~patchOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Order} order 
     * @param {module:api/OrderApi~patchOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.patchOrders = function(direction, orderID, order, callback) {
      var postBody = order;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling patchOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling patchOrders");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling patchOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchShippingAddressOrders operation.
     * @callback module:api/OrderApi~patchShippingAddressOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Address} address 
     * @param {module:api/OrderApi~patchShippingAddressOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.patchShippingAddressOrders = function(direction, orderID, address, callback) {
      var postBody = address;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling patchShippingAddressOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling patchShippingAddressOrders");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling patchShippingAddressOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/shipto', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removePromotionOrders operation.
     * @callback module:api/OrderApi~removePromotionOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} promoCode Promo code of the order.
     * @param {module:api/OrderApi~removePromotionOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.removePromotionOrders = function(direction, orderID, promoCode, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling removePromotionOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling removePromotionOrders");
      }

      // verify the required parameter 'promoCode' is set
      if (promoCode === undefined || promoCode === null) {
        throw new Error("Missing the required parameter 'promoCode' when calling removePromotionOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'promoCode': promoCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/promotions/{promoCode}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveOrders operation.
     * @callback module:api/OrderApi~saveOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Order} order 
     * @param {module:api/OrderApi~saveOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.saveOrders = function(direction, orderID, order, callback) {
      var postBody = order;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling saveOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling saveOrders");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling saveOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setBillingAddressOrders operation.
     * @callback module:api/OrderApi~setBillingAddressOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Address} address 
     * @param {module:api/OrderApi~setBillingAddressOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.setBillingAddressOrders = function(direction, orderID, address, callback) {
      var postBody = address;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling setBillingAddressOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling setBillingAddressOrders");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling setBillingAddressOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/billto', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setShippingAddressOrders operation.
     * @callback module:api/OrderApi~setShippingAddressOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Address} address 
     * @param {module:api/OrderApi~setShippingAddressOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.setShippingAddressOrders = function(direction, orderID, address, callback) {
      var postBody = address;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling setShippingAddressOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling setShippingAddressOrders");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling setShippingAddressOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/shipto', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shipOrders operation.
     * @callback module:api/OrderApi~shipOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/Shipment} shipment 
     * @param {module:api/OrderApi~shipOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.shipOrders = function(direction, orderID, shipment, callback) {
      var postBody = shipment;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling shipOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling shipOrders");
      }

      // verify the required parameter 'shipment' is set
      if (shipment === undefined || shipment === null) {
        throw new Error("Missing the required parameter 'shipment' when calling shipOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/ship', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitOrders operation.
     * @callback module:api/OrderApi~submitOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:api/OrderApi~submitOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.submitOrders = function(direction, orderID, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling submitOrders");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling submitOrders");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/submit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
