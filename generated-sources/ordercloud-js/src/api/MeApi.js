/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Authentication', 'model/BuyerAddress', 'model/BuyerCreditCard', 'model/BuyerProduct', 'model/BuyerSpec', 'model/Catalog', 'model/Category', 'model/ListBuyerAddress', 'model/ListBuyerCreditCard', 'model/ListBuyerProduct', 'model/ListBuyerSpec', 'model/ListCatalog', 'model/ListCategory', 'model/ListCostCenter', 'model/ListOrder', 'model/ListPromotion', 'model/ListShipment', 'model/ListShipmentItem', 'model/ListSpendingAccount', 'model/ListUserGroup', 'model/MeUser', 'model/Promotion', 'model/Shipment', 'model/SpendingAccount', 'model/TokenPasswordReset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Authentication'), require('../model/BuyerAddress'), require('../model/BuyerCreditCard'), require('../model/BuyerProduct'), require('../model/BuyerSpec'), require('../model/Catalog'), require('../model/Category'), require('../model/ListBuyerAddress'), require('../model/ListBuyerCreditCard'), require('../model/ListBuyerProduct'), require('../model/ListBuyerSpec'), require('../model/ListCatalog'), require('../model/ListCategory'), require('../model/ListCostCenter'), require('../model/ListOrder'), require('../model/ListPromotion'), require('../model/ListShipment'), require('../model/ListShipmentItem'), require('../model/ListSpendingAccount'), require('../model/ListUserGroup'), require('../model/MeUser'), require('../model/Promotion'), require('../model/Shipment'), require('../model/SpendingAccount'), require('../model/TokenPasswordReset'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.MeApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Authentication, root.OrderCloud.BuyerAddress, root.OrderCloud.BuyerCreditCard, root.OrderCloud.BuyerProduct, root.OrderCloud.BuyerSpec, root.OrderCloud.Catalog, root.OrderCloud.Category, root.OrderCloud.ListBuyerAddress, root.OrderCloud.ListBuyerCreditCard, root.OrderCloud.ListBuyerProduct, root.OrderCloud.ListBuyerSpec, root.OrderCloud.ListCatalog, root.OrderCloud.ListCategory, root.OrderCloud.ListCostCenter, root.OrderCloud.ListOrder, root.OrderCloud.ListPromotion, root.OrderCloud.ListShipment, root.OrderCloud.ListShipmentItem, root.OrderCloud.ListSpendingAccount, root.OrderCloud.ListUserGroup, root.OrderCloud.MeUser, root.OrderCloud.Promotion, root.OrderCloud.Shipment, root.OrderCloud.SpendingAccount, root.OrderCloud.TokenPasswordReset);
  }
}(this, function(ApiClient, Authentication, BuyerAddress, BuyerCreditCard, BuyerProduct, BuyerSpec, Catalog, Category, ListBuyerAddress, ListBuyerCreditCard, ListBuyerProduct, ListBuyerSpec, ListCatalog, ListCategory, ListCostCenter, ListOrder, ListPromotion, ListShipment, ListShipmentItem, ListSpendingAccount, ListUserGroup, MeUser, Promotion, Shipment, SpendingAccount, TokenPasswordReset) {
  'use strict';

  /**
   * Me service.
   * @module api/MeApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MeApi. 
   * @alias module:api/MeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAddressMe operation.
     * @callback module:api/MeApi~createAddressMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BuyerAddress} buyerAddress 
     * @param {module:api/MeApi~createAddressMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerAddress}
     */
    this.createAddressMe = function(buyerAddress, callback) {
      var postBody = buyerAddress;

      // verify the required parameter 'buyerAddress' is set
      if (buyerAddress === undefined || buyerAddress === null) {
        throw new Error("Missing the required parameter 'buyerAddress' when calling createAddressMe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditCardMe operation.
     * @callback module:api/MeApi~createCreditCardMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BuyerCreditCard} buyerCreditCard 
     * @param {module:api/MeApi~createCreditCardMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerCreditCard}
     */
    this.createCreditCardMe = function(buyerCreditCard, callback) {
      var postBody = buyerCreditCard;

      // verify the required parameter 'buyerCreditCard' is set
      if (buyerCreditCard === undefined || buyerCreditCard === null) {
        throw new Error("Missing the required parameter 'buyerCreditCard' when calling createCreditCardMe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAddressMe operation.
     * @callback module:api/MeApi~deleteAddressMeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:api/MeApi~deleteAddressMeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAddressMe = function(addressID, callback) {
      var postBody = null;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling deleteAddressMe");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCreditCardMe operation.
     * @callback module:api/MeApi~deleteCreditCardMeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:api/MeApi~deleteCreditCardMeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCreditCardMe = function(creditcardID, callback) {
      var postBody = null;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling deleteCreditCardMe");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressMe operation.
     * @callback module:api/MeApi~getAddressMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:api/MeApi~getAddressMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerAddress}
     */
    this.getAddressMe = function(addressID, callback) {
      var postBody = null;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling getAddressMe");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogMe operation.
     * @callback module:api/MeApi~getCatalogMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Catalog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {module:api/MeApi~getCatalogMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Catalog}
     */
    this.getCatalogMe = function(catalogID, callback) {
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling getCatalogMe");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Catalog;

      return this.apiClient.callApi(
        '/me/catalogs/{catalogID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryMe operation.
     * @callback module:api/MeApi~getCategoryMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} categoryID ID of the category.
     * @param {String} catalogID ID of the catalog.
     * @param {module:api/MeApi~getCategoryMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.getCategoryMe = function(categoryID, catalogID, callback) {
      var postBody = null;

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling getCategoryMe");
      }

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling getCategoryMe");
      }


      var pathParams = {
        'categoryID': categoryID
      };
      var queryParams = {
        'catalogID': catalogID,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/me/categories/{categoryID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditCardMe operation.
     * @callback module:api/MeApi~getCreditCardMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:api/MeApi~getCreditCardMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerCreditCard}
     */
    this.getCreditCardMe = function(creditcardID, callback) {
      var postBody = null;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling getCreditCardMe");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMe operation.
     * @callback module:api/MeApi~getMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MeApi~getMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeUser}
     */
    this.getMe = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeUser;

      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductMe operation.
     * @callback module:api/MeApi~getProductMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:api/MeApi~getProductMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerProduct}
     */
    this.getProductMe = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getProductMe");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerProduct;

      return this.apiClient.callApi(
        '/me/products/{productID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromotionMe operation.
     * @callback module:api/MeApi~getPromotionMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Promotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} promotionID ID of the promotion.
     * @param {module:api/MeApi~getPromotionMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Promotion}
     */
    this.getPromotionMe = function(promotionID, callback) {
      var postBody = null;

      // verify the required parameter 'promotionID' is set
      if (promotionID === undefined || promotionID === null) {
        throw new Error("Missing the required parameter 'promotionID' when calling getPromotionMe");
      }


      var pathParams = {
        'promotionID': promotionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Promotion;

      return this.apiClient.callApi(
        '/me/promotions/{promotionID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentMe operation.
     * @callback module:api/MeApi~getShipmentMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} shipmentID ID of the shipment.
     * @param {module:api/MeApi~getShipmentMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    this.getShipmentMe = function(shipmentID, callback) {
      var postBody = null;

      // verify the required parameter 'shipmentID' is set
      if (shipmentID === undefined || shipmentID === null) {
        throw new Error("Missing the required parameter 'shipmentID' when calling getShipmentMe");
      }


      var pathParams = {
        'shipmentID': shipmentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Shipment;

      return this.apiClient.callApi(
        '/me/shipments/{shipmentID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecMe operation.
     * @callback module:api/MeApi~getSpecMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} specID ID of the spec.
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalogID ID of the catalog.
     * @param {module:api/MeApi~getSpecMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerSpec}
     */
    this.getSpecMe = function(productID, specID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getSpecMe");
      }

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling getSpecMe");
      }


      var pathParams = {
        'productID': productID,
        'specID': specID
      };
      var queryParams = {
        'catalogID': opts['catalogID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerSpec;

      return this.apiClient.callApi(
        '/me/products/{productID}/specs/{specID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpendingAccountMe operation.
     * @callback module:api/MeApi~getSpendingAccountMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:api/MeApi~getSpendingAccountMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.getSpendingAccountMe = function(spendingAccountID, callback) {
      var postBody = null;

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling getSpendingAccountMe");
      }


      var pathParams = {
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/me/spendingaccounts/{spendingAccountID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAddressesMe operation.
     * @callback module:api/MeApi~listAddressesMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listAddressesMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerAddress}
     */
    this.listAddressesMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listApprovableOrdersMe operation.
     * @callback module:api/MeApi~listApprovableOrdersMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listApprovableOrdersMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrder}
     */
    this.listApprovableOrdersMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrder;

      return this.apiClient.callApi(
        '/me/orders/approvable', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogsMe operation.
     * @callback module:api/MeApi~listCatalogsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCatalog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCatalogsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCatalog}
     */
    this.listCatalogsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCatalog;

      return this.apiClient.callApi(
        '/me/catalogs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCategoriesMe operation.
     * @callback module:api/MeApi~listCategoriesMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth Depth of the category.
     * @param {String} opts.catalogID ID of the catalog.
     * @param {String} opts.productID ID of the product.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCategoriesMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCategory}
     */
    this.listCategoriesMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'depth': opts['depth'],
        'catalogID': opts['catalogID'],
        'productID': opts['productID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCategory;

      return this.apiClient.callApi(
        '/me/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCostCentersMe operation.
     * @callback module:api/MeApi~listCostCentersMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCostCentersMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCostCenter}
     */
    this.listCostCentersMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCostCenter;

      return this.apiClient.callApi(
        '/me/costcenters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCreditCardsMe operation.
     * @callback module:api/MeApi~listCreditCardsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCreditCardsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerCreditCard}
     */
    this.listCreditCardsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrdersMe operation.
     * @callback module:api/MeApi~listOrdersMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listOrdersMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrder}
     */
    this.listOrdersMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrder;

      return this.apiClient.callApi(
        '/me/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductsMe operation.
     * @callback module:api/MeApi~listProductsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalogID ID of the catalog.
     * @param {String} opts.categoryID ID of the category.
     * @param {String} opts.depth Depth of the product.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listProductsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerProduct}
     */
    this.listProductsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'catalogID': opts['catalogID'],
        'categoryID': opts['categoryID'],
        'depth': opts['depth'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerProduct;

      return this.apiClient.callApi(
        '/me/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPromotionsMe operation.
     * @callback module:api/MeApi~listPromotionsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listPromotionsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPromotion}
     */
    this.listPromotionsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListPromotion;

      return this.apiClient.callApi(
        '/me/promotions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listShipmentItemsMe operation.
     * @callback module:api/MeApi~listShipmentItemsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShipmentItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} shipmentID ID of the shipment.
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderID ID of the order.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listShipmentItemsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShipmentItem}
     */
    this.listShipmentItemsMe = function(shipmentID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shipmentID' is set
      if (shipmentID === undefined || shipmentID === null) {
        throw new Error("Missing the required parameter 'shipmentID' when calling listShipmentItemsMe");
      }


      var pathParams = {
        'shipmentID': shipmentID
      };
      var queryParams = {
        'orderID': opts['orderID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListShipmentItem;

      return this.apiClient.callApi(
        '/me/shipments/{shipmentID}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listShipmentsMe operation.
     * @callback module:api/MeApi~listShipmentsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderID ID of the order.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listShipmentsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShipment}
     */
    this.listShipmentsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'orderID': opts['orderID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListShipment;

      return this.apiClient.callApi(
        '/me/shipments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpecsMe operation.
     * @callback module:api/MeApi~listSpecsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalogID ID of the catalog.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listSpecsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerSpec}
     */
    this.listSpecsMe = function(productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling listSpecsMe");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
        'catalogID': opts['catalogID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerSpec;

      return this.apiClient.callApi(
        '/me/products/{productID}/specs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpendingAccountsMe operation.
     * @callback module:api/MeApi~listSpendingAccountsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listSpendingAccountsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpendingAccount}
     */
    this.listSpendingAccountsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpendingAccount;

      return this.apiClient.callApi(
        '/me/spendingAccounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserGroupsMe operation.
     * @callback module:api/MeApi~listUserGroupsMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listUserGroupsMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserGroup}
     */
    this.listUserGroupsMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListUserGroup;

      return this.apiClient.callApi(
        '/me/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAddressMe operation.
     * @callback module:api/MeApi~patchAddressMeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:model/BuyerAddress} buyerAddress 
     * @param {module:api/MeApi~patchAddressMeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.patchAddressMe = function(addressID, buyerAddress, callback) {
      var postBody = buyerAddress;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling patchAddressMe");
      }

      // verify the required parameter 'buyerAddress' is set
      if (buyerAddress === undefined || buyerAddress === null) {
        throw new Error("Missing the required parameter 'buyerAddress' when calling patchAddressMe");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCreditCardMe operation.
     * @callback module:api/MeApi~patchCreditCardMeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:model/BuyerCreditCard} buyerCreditCard 
     * @param {module:api/MeApi~patchCreditCardMeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.patchCreditCardMe = function(creditcardID, buyerCreditCard, callback) {
      var postBody = buyerCreditCard;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling patchCreditCardMe");
      }

      // verify the required parameter 'buyerCreditCard' is set
      if (buyerCreditCard === undefined || buyerCreditCard === null) {
        throw new Error("Missing the required parameter 'buyerCreditCard' when calling patchCreditCardMe");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMe operation.
     * @callback module:api/MeApi~patchMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MeUser} meUser 
     * @param {module:api/MeApi~patchMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeUser}
     */
    this.patchMe = function(meUser, callback) {
      var postBody = meUser;

      // verify the required parameter 'meUser' is set
      if (meUser === undefined || meUser === null) {
        throw new Error("Missing the required parameter 'meUser' when calling patchMe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MeUser;

      return this.apiClient.callApi(
        '/me', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerMe operation.
     * @callback module:api/MeApi~registerMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authentication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} anonUserToken Anon user token of the user.
     * @param {module:model/MeUser} meUser 
     * @param {module:api/MeApi~registerMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authentication}
     */
    this.registerMe = function(anonUserToken, meUser, callback) {
      var postBody = meUser;

      // verify the required parameter 'anonUserToken' is set
      if (anonUserToken === undefined || anonUserToken === null) {
        throw new Error("Missing the required parameter 'anonUserToken' when calling registerMe");
      }

      // verify the required parameter 'meUser' is set
      if (meUser === undefined || meUser === null) {
        throw new Error("Missing the required parameter 'meUser' when calling registerMe");
      }


      var pathParams = {
      };
      var queryParams = {
        'anonUserToken': anonUserToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Authentication;

      return this.apiClient.callApi(
        '/me/register', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordByTokenMe operation.
     * @callback module:api/MeApi~resetPasswordByTokenMeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TokenPasswordReset} tokenPasswordReset 
     * @param {module:api/MeApi~resetPasswordByTokenMeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetPasswordByTokenMe = function(tokenPasswordReset, callback) {
      var postBody = tokenPasswordReset;

      // verify the required parameter 'tokenPasswordReset' is set
      if (tokenPasswordReset === undefined || tokenPasswordReset === null) {
        throw new Error("Missing the required parameter 'tokenPasswordReset' when calling resetPasswordByTokenMe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAddressMe operation.
     * @callback module:api/MeApi~saveAddressMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:model/BuyerAddress} buyerAddress 
     * @param {module:api/MeApi~saveAddressMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerAddress}
     */
    this.saveAddressMe = function(addressID, buyerAddress, callback) {
      var postBody = buyerAddress;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling saveAddressMe");
      }

      // verify the required parameter 'buyerAddress' is set
      if (buyerAddress === undefined || buyerAddress === null) {
        throw new Error("Missing the required parameter 'buyerAddress' when calling saveAddressMe");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCreditCardMe operation.
     * @callback module:api/MeApi~saveCreditCardMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:model/BuyerCreditCard} buyerCreditCard 
     * @param {module:api/MeApi~saveCreditCardMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerCreditCard}
     */
    this.saveCreditCardMe = function(creditcardID, buyerCreditCard, callback) {
      var postBody = buyerCreditCard;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling saveCreditCardMe");
      }

      // verify the required parameter 'buyerCreditCard' is set
      if (buyerCreditCard === undefined || buyerCreditCard === null) {
        throw new Error("Missing the required parameter 'buyerCreditCard' when calling saveCreditCardMe");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveMe operation.
     * @callback module:api/MeApi~saveMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MeUser} meUser 
     * @param {module:api/MeApi~saveMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeUser}
     */
    this.saveMe = function(meUser, callback) {
      var postBody = meUser;

      // verify the required parameter 'meUser' is set
      if (meUser === undefined || meUser === null) {
        throw new Error("Missing the required parameter 'meUser' when calling saveMe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MeUser;

      return this.apiClient.callApi(
        '/me', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transferAnonUserOrderMe operation.
     * @callback module:api/MeApi~transferAnonUserOrderMeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} anonUserToken Anon user token of the me.
     * @param {module:api/MeApi~transferAnonUserOrderMeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transferAnonUserOrderMe = function(anonUserToken, callback) {
      var postBody = null;

      // verify the required parameter 'anonUserToken' is set
      if (anonUserToken === undefined || anonUserToken === null) {
        throw new Error("Missing the required parameter 'anonUserToken' when calling transferAnonUserOrderMe");
      }


      var pathParams = {
      };
      var queryParams = {
        'anonUserToken': anonUserToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/orders', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
