/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Authentication', 'model/BuyerAddress', 'model/BuyerCreditCard', 'model/BuyerProduct', 'model/BuyerSpec', 'model/Catalog', 'model/Category', 'model/ListBuyerAddress', 'model/ListBuyerCreditCard', 'model/ListBuyerProduct', 'model/ListBuyerSpec', 'model/ListCatalog', 'model/ListCategory', 'model/ListCostCenter', 'model/ListOrder', 'model/ListPromotion', 'model/ListShipment', 'model/ListShipmentItem', 'model/ListSpendingAccount', 'model/ListUserGroup', 'model/MeUser', 'model/Promotion', 'model/Shipment', 'model/SpendingAccount', 'model/TokenPasswordReset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Authentication'), require('../model/BuyerAddress'), require('../model/BuyerCreditCard'), require('../model/BuyerProduct'), require('../model/BuyerSpec'), require('../model/Catalog'), require('../model/Category'), require('../model/ListBuyerAddress'), require('../model/ListBuyerCreditCard'), require('../model/ListBuyerProduct'), require('../model/ListBuyerSpec'), require('../model/ListCatalog'), require('../model/ListCategory'), require('../model/ListCostCenter'), require('../model/ListOrder'), require('../model/ListPromotion'), require('../model/ListShipment'), require('../model/ListShipmentItem'), require('../model/ListSpendingAccount'), require('../model/ListUserGroup'), require('../model/MeUser'), require('../model/Promotion'), require('../model/Shipment'), require('../model/SpendingAccount'), require('../model/TokenPasswordReset'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.MeApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Authentication, root.OrderCloud.BuyerAddress, root.OrderCloud.BuyerCreditCard, root.OrderCloud.BuyerProduct, root.OrderCloud.BuyerSpec, root.OrderCloud.Catalog, root.OrderCloud.Category, root.OrderCloud.ListBuyerAddress, root.OrderCloud.ListBuyerCreditCard, root.OrderCloud.ListBuyerProduct, root.OrderCloud.ListBuyerSpec, root.OrderCloud.ListCatalog, root.OrderCloud.ListCategory, root.OrderCloud.ListCostCenter, root.OrderCloud.ListOrder, root.OrderCloud.ListPromotion, root.OrderCloud.ListShipment, root.OrderCloud.ListShipmentItem, root.OrderCloud.ListSpendingAccount, root.OrderCloud.ListUserGroup, root.OrderCloud.MeUser, root.OrderCloud.Promotion, root.OrderCloud.Shipment, root.OrderCloud.SpendingAccount, root.OrderCloud.TokenPasswordReset);
  }
}(this, function(ApiClient, Authentication, BuyerAddress, BuyerCreditCard, BuyerProduct, BuyerSpec, Catalog, Category, ListBuyerAddress, ListBuyerCreditCard, ListBuyerProduct, ListBuyerSpec, ListCatalog, ListCategory, ListCostCenter, ListOrder, ListPromotion, ListShipment, ListShipmentItem, ListSpendingAccount, ListUserGroup, MeUser, Promotion, Shipment, SpendingAccount, TokenPasswordReset) {
  'use strict';

  /**
   * Me service.
   * @module api/MeApi
   * @version 1.0.89
   */

  /**
   * Constructs a new MeApi. 
   * @alias module:api/MeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAddressV1meaddresses operation.
     * @callback module:api/MeApi~createAddressV1meaddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BuyerAddress} buyerAddress 
     * @param {module:api/MeApi~createAddressV1meaddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerAddress}
     */
    this.createAddressV1meaddresses = function(buyerAddress, callback) {
      var postBody = buyerAddress;

      // verify the required parameter 'buyerAddress' is set
      if (buyerAddress === undefined || buyerAddress === null) {
        throw new Error("Missing the required parameter 'buyerAddress' when calling createAddressV1meaddresses");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCreditCardV1mecreditcards operation.
     * @callback module:api/MeApi~createCreditCardV1mecreditcardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BuyerCreditCard} buyerCreditCard 
     * @param {module:api/MeApi~createCreditCardV1mecreditcardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerCreditCard}
     */
    this.createCreditCardV1mecreditcards = function(buyerCreditCard, callback) {
      var postBody = buyerCreditCard;

      // verify the required parameter 'buyerCreditCard' is set
      if (buyerCreditCard === undefined || buyerCreditCard === null) {
        throw new Error("Missing the required parameter 'buyerCreditCard' when calling createCreditCardV1mecreditcards");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAddressV1meaddressesaddressID operation.
     * @callback module:api/MeApi~deleteAddressV1meaddressesaddressIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:api/MeApi~deleteAddressV1meaddressesaddressIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAddressV1meaddressesaddressID = function(addressID, callback) {
      var postBody = null;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling deleteAddressV1meaddressesaddressID");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCreditCardV1mecreditcardscreditcardID operation.
     * @callback module:api/MeApi~deleteCreditCardV1mecreditcardscreditcardIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:api/MeApi~deleteCreditCardV1mecreditcardscreditcardIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCreditCardV1mecreditcardscreditcardID = function(creditcardID, callback) {
      var postBody = null;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling deleteCreditCardV1mecreditcardscreditcardID");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddressV1meaddressesaddressID operation.
     * @callback module:api/MeApi~getAddressV1meaddressesaddressIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:api/MeApi~getAddressV1meaddressesaddressIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerAddress}
     */
    this.getAddressV1meaddressesaddressID = function(addressID, callback) {
      var postBody = null;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling getAddressV1meaddressesaddressID");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogV1mecatalogscatalogID operation.
     * @callback module:api/MeApi~getCatalogV1mecatalogscatalogIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Catalog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {module:api/MeApi~getCatalogV1mecatalogscatalogIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Catalog}
     */
    this.getCatalogV1mecatalogscatalogID = function(catalogID, callback) {
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling getCatalogV1mecatalogscatalogID");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Catalog;

      return this.apiClient.callApi(
        '/me/catalogs/{catalogID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryV1mecategoriescategoryID operation.
     * @callback module:api/MeApi~getCategoryV1mecategoriescategoryIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} categoryID ID of the category.
     * @param {String} catalogID ID of the catalog.
     * @param {module:api/MeApi~getCategoryV1mecategoriescategoryIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.getCategoryV1mecategoriescategoryID = function(categoryID, catalogID, callback) {
      var postBody = null;

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling getCategoryV1mecategoriescategoryID");
      }

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling getCategoryV1mecategoriescategoryID");
      }


      var pathParams = {
        'categoryID': categoryID
      };
      var queryParams = {
        'catalogID': catalogID,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/me/categories/{categoryID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditCardV1mecreditcardscreditcardID operation.
     * @callback module:api/MeApi~getCreditCardV1mecreditcardscreditcardIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:api/MeApi~getCreditCardV1mecreditcardscreditcardIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerCreditCard}
     */
    this.getCreditCardV1mecreditcardscreditcardID = function(creditcardID, callback) {
      var postBody = null;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling getCreditCardV1mecreditcardscreditcardID");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductV1meproductsproductID operation.
     * @callback module:api/MeApi~getProductV1meproductsproductIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:api/MeApi~getProductV1meproductsproductIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerProduct}
     */
    this.getProductV1meproductsproductID = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getProductV1meproductsproductID");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerProduct;

      return this.apiClient.callApi(
        '/me/products/{productID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPromotionV1mepromotionspromotionID operation.
     * @callback module:api/MeApi~getPromotionV1mepromotionspromotionIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Promotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} promotionID ID of the promotion.
     * @param {module:api/MeApi~getPromotionV1mepromotionspromotionIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Promotion}
     */
    this.getPromotionV1mepromotionspromotionID = function(promotionID, callback) {
      var postBody = null;

      // verify the required parameter 'promotionID' is set
      if (promotionID === undefined || promotionID === null) {
        throw new Error("Missing the required parameter 'promotionID' when calling getPromotionV1mepromotionspromotionID");
      }


      var pathParams = {
        'promotionID': promotionID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Promotion;

      return this.apiClient.callApi(
        '/me/promotions/{promotionID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentV1meshipmentsshipmentID operation.
     * @callback module:api/MeApi~getShipmentV1meshipmentsshipmentIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} shipmentID ID of the shipment.
     * @param {module:api/MeApi~getShipmentV1meshipmentsshipmentIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    this.getShipmentV1meshipmentsshipmentID = function(shipmentID, callback) {
      var postBody = null;

      // verify the required parameter 'shipmentID' is set
      if (shipmentID === undefined || shipmentID === null) {
        throw new Error("Missing the required parameter 'shipmentID' when calling getShipmentV1meshipmentsshipmentID");
      }


      var pathParams = {
        'shipmentID': shipmentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Shipment;

      return this.apiClient.callApi(
        '/me/shipments/{shipmentID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecV1meproductsproductIDspecsspecID operation.
     * @callback module:api/MeApi~getSpecV1meproductsproductIDspecsspecIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} specID ID of the spec.
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalogID ID of the catalog.
     * @param {module:api/MeApi~getSpecV1meproductsproductIDspecsspecIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerSpec}
     */
    this.getSpecV1meproductsproductIDspecsspecID = function(productID, specID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getSpecV1meproductsproductIDspecsspecID");
      }

      // verify the required parameter 'specID' is set
      if (specID === undefined || specID === null) {
        throw new Error("Missing the required parameter 'specID' when calling getSpecV1meproductsproductIDspecsspecID");
      }


      var pathParams = {
        'productID': productID,
        'specID': specID
      };
      var queryParams = {
        'catalogID': opts['catalogID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BuyerSpec;

      return this.apiClient.callApi(
        '/me/products/{productID}/specs/{specID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpendingAccountV1mespendingaccountsspendingAccountID operation.
     * @callback module:api/MeApi~getSpendingAccountV1mespendingaccountsspendingAccountIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:api/MeApi~getSpendingAccountV1mespendingaccountsspendingAccountIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.getSpendingAccountV1mespendingaccountsspendingAccountID = function(spendingAccountID, callback) {
      var postBody = null;

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling getSpendingAccountV1mespendingaccountsspendingAccountID");
      }


      var pathParams = {
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/me/spendingaccounts/{spendingAccountID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1me operation.
     * @callback module:api/MeApi~getV1meCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MeApi~getV1meCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeUser}
     */
    this.getV1me = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MeUser;

      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAddressesV1meaddresses operation.
     * @callback module:api/MeApi~listAddressesV1meaddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listAddressesV1meaddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerAddress}
     */
    this.listAddressesV1meaddresses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listApprovableOrdersV1meordersapprovable operation.
     * @callback module:api/MeApi~listApprovableOrdersV1meordersapprovableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listApprovableOrdersV1meordersapprovableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrder}
     */
    this.listApprovableOrdersV1meordersapprovable = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrder;

      return this.apiClient.callApi(
        '/me/orders/approvable', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCatalogsV1mecatalogs operation.
     * @callback module:api/MeApi~listCatalogsV1mecatalogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCatalog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCatalogsV1mecatalogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCatalog}
     */
    this.listCatalogsV1mecatalogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCatalog;

      return this.apiClient.callApi(
        '/me/catalogs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCategoriesV1mecategories operation.
     * @callback module:api/MeApi~listCategoriesV1mecategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth Depth of the category.
     * @param {String} opts.catalogID ID of the catalog.
     * @param {String} opts.productID ID of the product.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCategoriesV1mecategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCategory}
     */
    this.listCategoriesV1mecategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'depth': opts['depth'],
        'catalogID': opts['catalogID'],
        'productID': opts['productID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCategory;

      return this.apiClient.callApi(
        '/me/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCostCentersV1mecostcenters operation.
     * @callback module:api/MeApi~listCostCentersV1mecostcentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCostCenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCostCentersV1mecostcentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCostCenter}
     */
    this.listCostCentersV1mecostcenters = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCostCenter;

      return this.apiClient.callApi(
        '/me/costcenters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCreditCardsV1mecreditcards operation.
     * @callback module:api/MeApi~listCreditCardsV1mecreditcardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listCreditCardsV1mecreditcardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerCreditCard}
     */
    this.listCreditCardsV1mecreditcards = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrdersV1meorders operation.
     * @callback module:api/MeApi~listOrdersV1meordersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listOrdersV1meordersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrder}
     */
    this.listOrdersV1meorders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOrder;

      return this.apiClient.callApi(
        '/me/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductsV1meproducts operation.
     * @callback module:api/MeApi~listProductsV1meproductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalogID ID of the catalog.
     * @param {String} opts.categoryID ID of the category.
     * @param {String} opts.depth Depth of the product.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listProductsV1meproductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerProduct}
     */
    this.listProductsV1meproducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'catalogID': opts['catalogID'],
        'categoryID': opts['categoryID'],
        'depth': opts['depth'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerProduct;

      return this.apiClient.callApi(
        '/me/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPromotionsV1mepromotions operation.
     * @callback module:api/MeApi~listPromotionsV1mepromotionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listPromotionsV1mepromotionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPromotion}
     */
    this.listPromotionsV1mepromotions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListPromotion;

      return this.apiClient.callApi(
        '/me/promotions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listShipmentItemsV1meshipmentsshipmentIDitems operation.
     * @callback module:api/MeApi~listShipmentItemsV1meshipmentsshipmentIDitemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShipmentItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} shipmentID ID of the shipment.
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderID ID of the order.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listShipmentItemsV1meshipmentsshipmentIDitemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShipmentItem}
     */
    this.listShipmentItemsV1meshipmentsshipmentIDitems = function(shipmentID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'shipmentID' is set
      if (shipmentID === undefined || shipmentID === null) {
        throw new Error("Missing the required parameter 'shipmentID' when calling listShipmentItemsV1meshipmentsshipmentIDitems");
      }


      var pathParams = {
        'shipmentID': shipmentID
      };
      var queryParams = {
        'orderID': opts['orderID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListShipmentItem;

      return this.apiClient.callApi(
        '/me/shipments/{shipmentID}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listShipmentsV1meshipments operation.
     * @callback module:api/MeApi~listShipmentsV1meshipmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderID ID of the order.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listShipmentsV1meshipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShipment}
     */
    this.listShipmentsV1meshipments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'orderID': opts['orderID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListShipment;

      return this.apiClient.callApi(
        '/me/shipments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpecsV1meproductsproductIDspecs operation.
     * @callback module:api/MeApi~listSpecsV1meproductsproductIDspecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuyerSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalogID ID of the catalog.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listSpecsV1meproductsproductIDspecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuyerSpec}
     */
    this.listSpecsV1meproductsproductIDspecs = function(productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling listSpecsV1meproductsproductIDspecs");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
        'catalogID': opts['catalogID'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListBuyerSpec;

      return this.apiClient.callApi(
        '/me/products/{productID}/specs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpendingAccountsV1mespendingAccounts operation.
     * @callback module:api/MeApi~listSpendingAccountsV1mespendingAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listSpendingAccountsV1mespendingAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpendingAccount}
     */
    this.listSpendingAccountsV1mespendingAccounts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpendingAccount;

      return this.apiClient.callApi(
        '/me/spendingAccounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserGroupsV1meusergroups operation.
     * @callback module:api/MeApi~listUserGroupsV1meusergroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/MeApi~listUserGroupsV1meusergroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserGroup}
     */
    this.listUserGroupsV1meusergroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListUserGroup;

      return this.apiClient.callApi(
        '/me/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAddressV1meaddressesaddressID operation.
     * @callback module:api/MeApi~patchAddressV1meaddressesaddressIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:model/BuyerAddress} buyerAddress 
     * @param {module:api/MeApi~patchAddressV1meaddressesaddressIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.patchAddressV1meaddressesaddressID = function(addressID, buyerAddress, callback) {
      var postBody = buyerAddress;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling patchAddressV1meaddressesaddressID");
      }

      // verify the required parameter 'buyerAddress' is set
      if (buyerAddress === undefined || buyerAddress === null) {
        throw new Error("Missing the required parameter 'buyerAddress' when calling patchAddressV1meaddressesaddressID");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCreditCardV1mecreditcardscreditcardID operation.
     * @callback module:api/MeApi~patchCreditCardV1mecreditcardscreditcardIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:model/BuyerCreditCard} buyerCreditCard 
     * @param {module:api/MeApi~patchCreditCardV1mecreditcardscreditcardIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.patchCreditCardV1mecreditcardscreditcardID = function(creditcardID, buyerCreditCard, callback) {
      var postBody = buyerCreditCard;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling patchCreditCardV1mecreditcardscreditcardID");
      }

      // verify the required parameter 'buyerCreditCard' is set
      if (buyerCreditCard === undefined || buyerCreditCard === null) {
        throw new Error("Missing the required parameter 'buyerCreditCard' when calling patchCreditCardV1mecreditcardscreditcardID");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchV1me operation.
     * @callback module:api/MeApi~patchV1meCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MeUser} meUser 
     * @param {module:api/MeApi~patchV1meCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeUser}
     */
    this.patchV1me = function(meUser, callback) {
      var postBody = meUser;

      // verify the required parameter 'meUser' is set
      if (meUser === undefined || meUser === null) {
        throw new Error("Missing the required parameter 'meUser' when calling patchV1me");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MeUser;

      return this.apiClient.callApi(
        '/me', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerV1meregister operation.
     * @callback module:api/MeApi~registerV1meregisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authentication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} anonUserToken Anon user token of the user.
     * @param {module:model/MeUser} meUser 
     * @param {module:api/MeApi~registerV1meregisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authentication}
     */
    this.registerV1meregister = function(anonUserToken, meUser, callback) {
      var postBody = meUser;

      // verify the required parameter 'anonUserToken' is set
      if (anonUserToken === undefined || anonUserToken === null) {
        throw new Error("Missing the required parameter 'anonUserToken' when calling registerV1meregister");
      }

      // verify the required parameter 'meUser' is set
      if (meUser === undefined || meUser === null) {
        throw new Error("Missing the required parameter 'meUser' when calling registerV1meregister");
      }


      var pathParams = {
      };
      var queryParams = {
        'anonUserToken': anonUserToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Authentication;

      return this.apiClient.callApi(
        '/me/register', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordByTokenV1mepassword operation.
     * @callback module:api/MeApi~resetPasswordByTokenV1mepasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TokenPasswordReset} tokenPasswordReset 
     * @param {module:api/MeApi~resetPasswordByTokenV1mepasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetPasswordByTokenV1mepassword = function(tokenPasswordReset, callback) {
      var postBody = tokenPasswordReset;

      // verify the required parameter 'tokenPasswordReset' is set
      if (tokenPasswordReset === undefined || tokenPasswordReset === null) {
        throw new Error("Missing the required parameter 'tokenPasswordReset' when calling resetPasswordByTokenV1mepassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAddressV1meaddressesaddressID operation.
     * @callback module:api/MeApi~saveAddressV1meaddressesaddressIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} addressID ID of the address.
     * @param {module:model/BuyerAddress} buyerAddress 
     * @param {module:api/MeApi~saveAddressV1meaddressesaddressIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerAddress}
     */
    this.saveAddressV1meaddressesaddressID = function(addressID, buyerAddress, callback) {
      var postBody = buyerAddress;

      // verify the required parameter 'addressID' is set
      if (addressID === undefined || addressID === null) {
        throw new Error("Missing the required parameter 'addressID' when calling saveAddressV1meaddressesaddressID");
      }

      // verify the required parameter 'buyerAddress' is set
      if (buyerAddress === undefined || buyerAddress === null) {
        throw new Error("Missing the required parameter 'buyerAddress' when calling saveAddressV1meaddressesaddressID");
      }


      var pathParams = {
        'addressID': addressID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerAddress;

      return this.apiClient.callApi(
        '/me/addresses/{addressID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCreditCardV1mecreditcardscreditcardID operation.
     * @callback module:api/MeApi~saveCreditCardV1mecreditcardscreditcardIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyerCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} creditcardID ID of the creditcard.
     * @param {module:model/BuyerCreditCard} buyerCreditCard 
     * @param {module:api/MeApi~saveCreditCardV1mecreditcardscreditcardIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyerCreditCard}
     */
    this.saveCreditCardV1mecreditcardscreditcardID = function(creditcardID, buyerCreditCard, callback) {
      var postBody = buyerCreditCard;

      // verify the required parameter 'creditcardID' is set
      if (creditcardID === undefined || creditcardID === null) {
        throw new Error("Missing the required parameter 'creditcardID' when calling saveCreditCardV1mecreditcardscreditcardID");
      }

      // verify the required parameter 'buyerCreditCard' is set
      if (buyerCreditCard === undefined || buyerCreditCard === null) {
        throw new Error("Missing the required parameter 'buyerCreditCard' when calling saveCreditCardV1mecreditcardscreditcardID");
      }


      var pathParams = {
        'creditcardID': creditcardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuyerCreditCard;

      return this.apiClient.callApi(
        '/me/creditcards/{creditcardID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveV1me operation.
     * @callback module:api/MeApi~saveV1meCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MeUser} meUser 
     * @param {module:api/MeApi~saveV1meCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeUser}
     */
    this.saveV1me = function(meUser, callback) {
      var postBody = meUser;

      // verify the required parameter 'meUser' is set
      if (meUser === undefined || meUser === null) {
        throw new Error("Missing the required parameter 'meUser' when calling saveV1me");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MeUser;

      return this.apiClient.callApi(
        '/me', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transferAnonUserOrderV1meorders operation.
     * @callback module:api/MeApi~transferAnonUserOrderV1meordersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} anonUserToken Anon user token of the me.
     * @param {module:api/MeApi~transferAnonUserOrderV1meordersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transferAnonUserOrderV1meorders = function(anonUserToken, callback) {
      var postBody = null;

      // verify the required parameter 'anonUserToken' is set
      if (anonUserToken === undefined || anonUserToken === null) {
        throw new Error("Missing the required parameter 'anonUserToken' when calling transferAnonUserOrderV1meorders");
      }


      var pathParams = {
      };
      var queryParams = {
        'anonUserToken': anonUserToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/me/orders', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
