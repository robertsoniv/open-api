/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApprovalRule', 'model/ListApprovalRule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApprovalRule'), require('../model/ListApprovalRule'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.ApprovalRuleApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.ApprovalRule, root.OrderCloud.ListApprovalRule);
  }
}(this, function(ApiClient, ApprovalRule, ListApprovalRule) {
  'use strict';

  /**
   * ApprovalRule service.
   * @module api/ApprovalRuleApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ApprovalRuleApi. 
   * @alias module:api/ApprovalRuleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createApprovalRules operation.
     * @callback module:api/ApprovalRuleApi~createApprovalRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/ApprovalRule} approvalRule 
     * @param {module:api/ApprovalRuleApi~createApprovalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRule}
     */
    this.createApprovalRules = function(buyerID, approvalRule, callback) {
      var postBody = approvalRule;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling createApprovalRules");
      }

      // verify the required parameter 'approvalRule' is set
      if (approvalRule === undefined || approvalRule === null) {
        throw new Error("Missing the required parameter 'approvalRule' when calling createApprovalRules");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRule;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/approvalrules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApprovalRules operation.
     * @callback module:api/ApprovalRuleApi~deleteApprovalRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} approvalRuleID ID of the approval rule.
     * @param {module:api/ApprovalRuleApi~deleteApprovalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApprovalRules = function(buyerID, approvalRuleID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteApprovalRules");
      }

      // verify the required parameter 'approvalRuleID' is set
      if (approvalRuleID === undefined || approvalRuleID === null) {
        throw new Error("Missing the required parameter 'approvalRuleID' when calling deleteApprovalRules");
      }


      var pathParams = {
        'buyerID': buyerID,
        'approvalRuleID': approvalRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/approvalrules/{approvalRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApprovalRules operation.
     * @callback module:api/ApprovalRuleApi~getApprovalRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} approvalRuleID ID of the approval rule.
     * @param {module:api/ApprovalRuleApi~getApprovalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRule}
     */
    this.getApprovalRules = function(buyerID, approvalRuleID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling getApprovalRules");
      }

      // verify the required parameter 'approvalRuleID' is set
      if (approvalRuleID === undefined || approvalRuleID === null) {
        throw new Error("Missing the required parameter 'approvalRuleID' when calling getApprovalRules");
      }


      var pathParams = {
        'buyerID': buyerID,
        'approvalRuleID': approvalRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApprovalRule;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/approvalrules/{approvalRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listApprovalRules operation.
     * @callback module:api/ApprovalRuleApi~listApprovalRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApprovalRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/ApprovalRuleApi~listApprovalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApprovalRule}
     */
    this.listApprovalRules = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listApprovalRules");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListApprovalRule;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/approvalrules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchApprovalRules operation.
     * @callback module:api/ApprovalRuleApi~patchApprovalRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} approvalRuleID ID of the approval rule.
     * @param {module:model/ApprovalRule} approvalRule 
     * @param {module:api/ApprovalRuleApi~patchApprovalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRule}
     */
    this.patchApprovalRules = function(buyerID, approvalRuleID, approvalRule, callback) {
      var postBody = approvalRule;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling patchApprovalRules");
      }

      // verify the required parameter 'approvalRuleID' is set
      if (approvalRuleID === undefined || approvalRuleID === null) {
        throw new Error("Missing the required parameter 'approvalRuleID' when calling patchApprovalRules");
      }

      // verify the required parameter 'approvalRule' is set
      if (approvalRule === undefined || approvalRule === null) {
        throw new Error("Missing the required parameter 'approvalRule' when calling patchApprovalRules");
      }


      var pathParams = {
        'buyerID': buyerID,
        'approvalRuleID': approvalRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRule;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/approvalrules/{approvalRuleID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveApprovalRules operation.
     * @callback module:api/ApprovalRuleApi~saveApprovalRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} approvalRuleID ID of the approval rule.
     * @param {module:model/ApprovalRule} approvalRule 
     * @param {module:api/ApprovalRuleApi~saveApprovalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRule}
     */
    this.saveApprovalRules = function(buyerID, approvalRuleID, approvalRule, callback) {
      var postBody = approvalRule;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveApprovalRules");
      }

      // verify the required parameter 'approvalRuleID' is set
      if (approvalRuleID === undefined || approvalRuleID === null) {
        throw new Error("Missing the required parameter 'approvalRuleID' when calling saveApprovalRules");
      }

      // verify the required parameter 'approvalRule' is set
      if (approvalRule === undefined || approvalRule === null) {
        throw new Error("Missing the required parameter 'approvalRule' when calling saveApprovalRules");
      }


      var pathParams = {
        'buyerID': buyerID,
        'approvalRuleID': approvalRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRule;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/approvalrules/{approvalRuleID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
