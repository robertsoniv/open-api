/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreditCard', 'model/CreditCardAssignment', 'model/ListCreditCard', 'model/ListCreditCardAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreditCard'), require('../model/CreditCardAssignment'), require('../model/ListCreditCard'), require('../model/ListCreditCardAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.CreditCardApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.CreditCard, root.OrderCloud.CreditCardAssignment, root.OrderCloud.ListCreditCard, root.OrderCloud.ListCreditCardAssignment);
  }
}(this, function(ApiClient, CreditCard, CreditCardAssignment, ListCreditCard, ListCreditCardAssignment) {
  'use strict';

  /**
   * CreditCard service.
   * @module api/CreditCardApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CreditCardApi. 
   * @alias module:api/CreditCardApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCreditCards operation.
     * @callback module:api/CreditCardApi~createCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/CreditCard} creditCard 
     * @param {module:api/CreditCardApi~createCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    this.createCreditCards = function(buyerID, creditCard, callback) {
      var postBody = creditCard;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling createCreditCards");
      }

      // verify the required parameter 'creditCard' is set
      if (creditCard === undefined || creditCard === null) {
        throw new Error("Missing the required parameter 'creditCard' when calling createCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreditCard;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssignmentCreditCards operation.
     * @callback module:api/CreditCardApi~deleteAssignmentCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} creditCardID ID of the credit card.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {module:api/CreditCardApi~deleteAssignmentCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssignmentCreditCards = function(buyerID, creditCardID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteAssignmentCreditCards");
      }

      // verify the required parameter 'creditCardID' is set
      if (creditCardID === undefined || creditCardID === null) {
        throw new Error("Missing the required parameter 'creditCardID' when calling deleteAssignmentCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID,
        'creditCardID': creditCardID
      };
      var queryParams = {
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/{creditCardID}/assignments', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCreditCards operation.
     * @callback module:api/CreditCardApi~deleteCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} creditCardID ID of the credit card.
     * @param {module:api/CreditCardApi~deleteCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCreditCards = function(buyerID, creditCardID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteCreditCards");
      }

      // verify the required parameter 'creditCardID' is set
      if (creditCardID === undefined || creditCardID === null) {
        throw new Error("Missing the required parameter 'creditCardID' when calling deleteCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID,
        'creditCardID': creditCardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/{creditCardID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditCards operation.
     * @callback module:api/CreditCardApi~getCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} creditCardID ID of the credit card.
     * @param {module:api/CreditCardApi~getCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    this.getCreditCards = function(buyerID, creditCardID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling getCreditCards");
      }

      // verify the required parameter 'creditCardID' is set
      if (creditCardID === undefined || creditCardID === null) {
        throw new Error("Missing the required parameter 'creditCardID' when calling getCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID,
        'creditCardID': creditCardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CreditCard;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/{creditCardID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignmentsCreditCards operation.
     * @callback module:api/CreditCardApi~listAssignmentsCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreditCardAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.creditCardID ID of the credit card.
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.level Level of the credit card assignment. Possible values: User, Group, Company.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/CreditCardApi~listAssignmentsCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreditCardAssignment}
     */
    this.listAssignmentsCreditCards = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listAssignmentsCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'creditCardID': opts['creditCardID'],
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
        'level': opts['level'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCreditCardAssignment;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCreditCards operation.
     * @callback module:api/CreditCardApi~listCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/CreditCardApi~listCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreditCard}
     */
    this.listCreditCards = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCreditCard;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCreditCards operation.
     * @callback module:api/CreditCardApi~patchCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} creditCardID ID of the credit card.
     * @param {module:model/CreditCard} creditCard 
     * @param {module:api/CreditCardApi~patchCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    this.patchCreditCards = function(buyerID, creditCardID, creditCard, callback) {
      var postBody = creditCard;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling patchCreditCards");
      }

      // verify the required parameter 'creditCardID' is set
      if (creditCardID === undefined || creditCardID === null) {
        throw new Error("Missing the required parameter 'creditCardID' when calling patchCreditCards");
      }

      // verify the required parameter 'creditCard' is set
      if (creditCard === undefined || creditCard === null) {
        throw new Error("Missing the required parameter 'creditCard' when calling patchCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID,
        'creditCardID': creditCardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreditCard;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/{creditCardID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssignmentCreditCards operation.
     * @callback module:api/CreditCardApi~saveAssignmentCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/CreditCardAssignment} creditCardAssignment 
     * @param {module:api/CreditCardApi~saveAssignmentCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAssignmentCreditCards = function(buyerID, creditCardAssignment, callback) {
      var postBody = creditCardAssignment;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveAssignmentCreditCards");
      }

      // verify the required parameter 'creditCardAssignment' is set
      if (creditCardAssignment === undefined || creditCardAssignment === null) {
        throw new Error("Missing the required parameter 'creditCardAssignment' when calling saveAssignmentCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCreditCards operation.
     * @callback module:api/CreditCardApi~saveCreditCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} creditCardID ID of the credit card.
     * @param {module:model/CreditCard} creditCard 
     * @param {module:api/CreditCardApi~saveCreditCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    this.saveCreditCards = function(buyerID, creditCardID, creditCard, callback) {
      var postBody = creditCard;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveCreditCards");
      }

      // verify the required parameter 'creditCardID' is set
      if (creditCardID === undefined || creditCardID === null) {
        throw new Error("Missing the required parameter 'creditCardID' when calling saveCreditCards");
      }

      // verify the required parameter 'creditCard' is set
      if (creditCard === undefined || creditCard === null) {
        throw new Error("Missing the required parameter 'creditCard' when calling saveCreditCards");
      }


      var pathParams = {
        'buyerID': buyerID,
        'creditCardID': creditCardID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreditCard;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/creditcards/{creditCardID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
