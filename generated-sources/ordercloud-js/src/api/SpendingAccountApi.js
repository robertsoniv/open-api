/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListSpendingAccount', 'model/ListSpendingAccountAssignment', 'model/SpendingAccount', 'model/SpendingAccountAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListSpendingAccount'), require('../model/ListSpendingAccountAssignment'), require('../model/SpendingAccount'), require('../model/SpendingAccountAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.SpendingAccountApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.ListSpendingAccount, root.OrderCloud.ListSpendingAccountAssignment, root.OrderCloud.SpendingAccount, root.OrderCloud.SpendingAccountAssignment);
  }
}(this, function(ApiClient, ListSpendingAccount, ListSpendingAccountAssignment, SpendingAccount, SpendingAccountAssignment) {
  'use strict';

  /**
   * SpendingAccount service.
   * @module api/SpendingAccountApi
   * @version 1.0.89
   */

  /**
   * Constructs a new SpendingAccountApi. 
   * @alias module:api/SpendingAccountApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createV1buyersbuyerIDspendingaccounts operation.
     * @callback module:api/SpendingAccountApi~createV1buyersbuyerIDspendingaccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/SpendingAccount} spendingAccount 
     * @param {module:api/SpendingAccountApi~createV1buyersbuyerIDspendingaccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.createV1buyersbuyerIDspendingaccounts = function(buyerID, spendingAccount, callback) {
      var postBody = spendingAccount;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling createV1buyersbuyerIDspendingaccounts");
      }

      // verify the required parameter 'spendingAccount' is set
      if (spendingAccount === undefined || spendingAccount === null) {
        throw new Error("Missing the required parameter 'spendingAccount' when calling createV1buyersbuyerIDspendingaccounts");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssignmentV1buyersbuyerIDspendingaccountsspendingAccountIDassignments operation.
     * @callback module:api/SpendingAccountApi~deleteAssignmentV1buyersbuyerIDspendingaccountsspendingAccountIDassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {module:api/SpendingAccountApi~deleteAssignmentV1buyersbuyerIDspendingaccountsspendingAccountIDassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssignmentV1buyersbuyerIDspendingaccountsspendingAccountIDassignments = function(buyerID, spendingAccountID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteAssignmentV1buyersbuyerIDspendingaccountsspendingAccountIDassignments");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling deleteAssignmentV1buyersbuyerIDspendingaccountsspendingAccountIDassignments");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}/assignments', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1buyersbuyerIDspendingaccountsspendingAccountID operation.
     * @callback module:api/SpendingAccountApi~deleteV1buyersbuyerIDspendingaccountsspendingAccountIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:api/SpendingAccountApi~deleteV1buyersbuyerIDspendingaccountsspendingAccountIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteV1buyersbuyerIDspendingaccountsspendingAccountID = function(buyerID, spendingAccountID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteV1buyersbuyerIDspendingaccountsspendingAccountID");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling deleteV1buyersbuyerIDspendingaccountsspendingAccountID");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1buyersbuyerIDspendingaccountsspendingAccountID operation.
     * @callback module:api/SpendingAccountApi~getV1buyersbuyerIDspendingaccountsspendingAccountIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:api/SpendingAccountApi~getV1buyersbuyerIDspendingaccountsspendingAccountIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.getV1buyersbuyerIDspendingaccountsspendingAccountID = function(buyerID, spendingAccountID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling getV1buyersbuyerIDspendingaccountsspendingAccountID");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling getV1buyersbuyerIDspendingaccountsspendingAccountID");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignmentsV1buyersbuyerIDspendingaccountsassignments operation.
     * @callback module:api/SpendingAccountApi~listAssignmentsV1buyersbuyerIDspendingaccountsassignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpendingAccountAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.spendingAccountID ID of the spending account.
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.level Level of the spending account assignment. Possible values: User, Group, Company.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/SpendingAccountApi~listAssignmentsV1buyersbuyerIDspendingaccountsassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpendingAccountAssignment}
     */
    this.listAssignmentsV1buyersbuyerIDspendingaccountsassignments = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listAssignmentsV1buyersbuyerIDspendingaccountsassignments");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'spendingAccountID': opts['spendingAccountID'],
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
        'level': opts['level'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpendingAccountAssignment;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listV1buyersbuyerIDspendingaccounts operation.
     * @callback module:api/SpendingAccountApi~listV1buyersbuyerIDspendingaccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SpendingAccountApi~listV1buyersbuyerIDspendingaccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpendingAccount}
     */
    this.listV1buyersbuyerIDspendingaccounts = function(buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling listV1buyersbuyerIDspendingaccounts");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListSpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchV1buyersbuyerIDspendingaccountsspendingAccountID operation.
     * @callback module:api/SpendingAccountApi~patchV1buyersbuyerIDspendingaccountsspendingAccountIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:model/SpendingAccount} spendingAccount 
     * @param {module:api/SpendingAccountApi~patchV1buyersbuyerIDspendingaccountsspendingAccountIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.patchV1buyersbuyerIDspendingaccountsspendingAccountID = function(buyerID, spendingAccountID, spendingAccount, callback) {
      var postBody = spendingAccount;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling patchV1buyersbuyerIDspendingaccountsspendingAccountID");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling patchV1buyersbuyerIDspendingaccountsspendingAccountID");
      }

      // verify the required parameter 'spendingAccount' is set
      if (spendingAccount === undefined || spendingAccount === null) {
        throw new Error("Missing the required parameter 'spendingAccount' when calling patchV1buyersbuyerIDspendingaccountsspendingAccountID");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssignmentV1buyersbuyerIDspendingaccountsassignments operation.
     * @callback module:api/SpendingAccountApi~saveAssignmentV1buyersbuyerIDspendingaccountsassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {module:model/SpendingAccountAssignment} spendingAccountAssignment 
     * @param {module:api/SpendingAccountApi~saveAssignmentV1buyersbuyerIDspendingaccountsassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAssignmentV1buyersbuyerIDspendingaccountsassignments = function(buyerID, spendingAccountAssignment, callback) {
      var postBody = spendingAccountAssignment;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveAssignmentV1buyersbuyerIDspendingaccountsassignments");
      }

      // verify the required parameter 'spendingAccountAssignment' is set
      if (spendingAccountAssignment === undefined || spendingAccountAssignment === null) {
        throw new Error("Missing the required parameter 'spendingAccountAssignment' when calling saveAssignmentV1buyersbuyerIDspendingaccountsassignments");
      }


      var pathParams = {
        'buyerID': buyerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveV1buyersbuyerIDspendingaccountsspendingAccountID operation.
     * @callback module:api/SpendingAccountApi~saveV1buyersbuyerIDspendingaccountsspendingAccountIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpendingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} spendingAccountID ID of the spending account.
     * @param {module:model/SpendingAccount} spendingAccount 
     * @param {module:api/SpendingAccountApi~saveV1buyersbuyerIDspendingaccountsspendingAccountIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpendingAccount}
     */
    this.saveV1buyersbuyerIDspendingaccountsspendingAccountID = function(buyerID, spendingAccountID, spendingAccount, callback) {
      var postBody = spendingAccount;

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling saveV1buyersbuyerIDspendingaccountsspendingAccountID");
      }

      // verify the required parameter 'spendingAccountID' is set
      if (spendingAccountID === undefined || spendingAccountID === null) {
        throw new Error("Missing the required parameter 'spendingAccountID' when calling saveV1buyersbuyerIDspendingaccountsspendingAccountID");
      }

      // verify the required parameter 'spendingAccount' is set
      if (spendingAccount === undefined || spendingAccount === null) {
        throw new Error("Missing the required parameter 'spendingAccount' when calling saveV1buyersbuyerIDspendingaccountsspendingAccountID");
      }


      var pathParams = {
        'buyerID': buyerID,
        'spendingAccountID': spendingAccountID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpendingAccount;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/spendingaccounts/{spendingAccountID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
