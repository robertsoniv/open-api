/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Address', 'model/LineItem', 'model/ListLineItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Address'), require('../model/LineItem'), require('../model/ListLineItem'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.LineItemApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Address, root.OrderCloud.LineItem, root.OrderCloud.ListLineItem);
  }
}(this, function(ApiClient, Address, LineItem, ListLineItem) {
  'use strict';

  /**
   * LineItem service.
   * @module api/LineItemApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LineItemApi. 
   * @alias module:api/LineItemApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createLineItems operation.
     * @callback module:api/LineItemApi~createLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {module:model/LineItem} lineItem 
     * @param {module:api/LineItemApi~createLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    this.createLineItems = function(direction, orderID, lineItem, callback) {
      var postBody = lineItem;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling createLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling createLineItems");
      }

      // verify the required parameter 'lineItem' is set
      if (lineItem === undefined || lineItem === null) {
        throw new Error("Missing the required parameter 'lineItem' when calling createLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLineItems operation.
     * @callback module:api/LineItemApi~deleteLineItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} lineItemID ID of the line item.
     * @param {module:api/LineItemApi~deleteLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLineItems = function(direction, orderID, lineItemID, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling deleteLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling deleteLineItems");
      }

      // verify the required parameter 'lineItemID' is set
      if (lineItemID === undefined || lineItemID === null) {
        throw new Error("Missing the required parameter 'lineItemID' when calling deleteLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'lineItemID': lineItemID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems/{lineItemID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineItems operation.
     * @callback module:api/LineItemApi~getLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} lineItemID ID of the line item.
     * @param {module:api/LineItemApi~getLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    this.getLineItems = function(direction, orderID, lineItemID, callback) {
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling getLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling getLineItems");
      }

      // verify the required parameter 'lineItemID' is set
      if (lineItemID === undefined || lineItemID === null) {
        throw new Error("Missing the required parameter 'lineItemID' when calling getLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'lineItemID': lineItemID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems/{lineItemID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listLineItems operation.
     * @callback module:api/LineItemApi~listLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/LineItemApi~listLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLineItem}
     */
    this.listLineItems = function(direction, orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling listLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling listLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListLineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchLineItems operation.
     * @callback module:api/LineItemApi~patchLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} lineItemID ID of the line item.
     * @param {module:model/LineItem} lineItem 
     * @param {module:api/LineItemApi~patchLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    this.patchLineItems = function(direction, orderID, lineItemID, lineItem, callback) {
      var postBody = lineItem;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling patchLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling patchLineItems");
      }

      // verify the required parameter 'lineItemID' is set
      if (lineItemID === undefined || lineItemID === null) {
        throw new Error("Missing the required parameter 'lineItemID' when calling patchLineItems");
      }

      // verify the required parameter 'lineItem' is set
      if (lineItem === undefined || lineItem === null) {
        throw new Error("Missing the required parameter 'lineItem' when calling patchLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'lineItemID': lineItemID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems/{lineItemID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchShippingAddressLineItems operation.
     * @callback module:api/LineItemApi~patchShippingAddressLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} lineItemID ID of the line item.
     * @param {module:model/Address} address 
     * @param {module:api/LineItemApi~patchShippingAddressLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    this.patchShippingAddressLineItems = function(direction, orderID, lineItemID, address, callback) {
      var postBody = address;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling patchShippingAddressLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling patchShippingAddressLineItems");
      }

      // verify the required parameter 'lineItemID' is set
      if (lineItemID === undefined || lineItemID === null) {
        throw new Error("Missing the required parameter 'lineItemID' when calling patchShippingAddressLineItems");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling patchShippingAddressLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'lineItemID': lineItemID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveLineItems operation.
     * @callback module:api/LineItemApi~saveLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} lineItemID ID of the line item.
     * @param {module:model/LineItem} lineItem 
     * @param {module:api/LineItemApi~saveLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    this.saveLineItems = function(direction, orderID, lineItemID, lineItem, callback) {
      var postBody = lineItem;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling saveLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling saveLineItems");
      }

      // verify the required parameter 'lineItemID' is set
      if (lineItemID === undefined || lineItemID === null) {
        throw new Error("Missing the required parameter 'lineItemID' when calling saveLineItems");
      }

      // verify the required parameter 'lineItem' is set
      if (lineItem === undefined || lineItem === null) {
        throw new Error("Missing the required parameter 'lineItem' when calling saveLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'lineItemID': lineItemID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems/{lineItemID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setShippingAddressLineItems operation.
     * @callback module:api/LineItemApi~setShippingAddressLineItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} direction Direction of the order, from the current user&#39;s perspective. Possible values: incoming, outgoing.
     * @param {String} orderID ID of the order.
     * @param {String} lineItemID ID of the line item.
     * @param {module:model/Address} address 
     * @param {module:api/LineItemApi~setShippingAddressLineItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    this.setShippingAddressLineItems = function(direction, orderID, lineItemID, address, callback) {
      var postBody = address;

      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling setShippingAddressLineItems");
      }

      // verify the required parameter 'orderID' is set
      if (orderID === undefined || orderID === null) {
        throw new Error("Missing the required parameter 'orderID' when calling setShippingAddressLineItems");
      }

      // verify the required parameter 'lineItemID' is set
      if (lineItemID === undefined || lineItemID === null) {
        throw new Error("Missing the required parameter 'lineItemID' when calling setShippingAddressLineItems");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling setShippingAddressLineItems");
      }


      var pathParams = {
        'direction': direction,
        'orderID': orderID,
        'lineItemID': lineItemID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LineItem;

      return this.apiClient.callApi(
        '/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
