/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListUserGroup', 'model/ListUserGroupAssignment', 'model/UserGroup', 'model/UserGroupAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListUserGroup'), require('../model/ListUserGroupAssignment'), require('../model/UserGroup'), require('../model/UserGroupAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.SupplierUserGroupApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.ListUserGroup, root.OrderCloud.ListUserGroupAssignment, root.OrderCloud.UserGroup, root.OrderCloud.UserGroupAssignment);
  }
}(this, function(ApiClient, ListUserGroup, ListUserGroupAssignment, UserGroup, UserGroupAssignment) {
  'use strict';

  /**
   * SupplierUserGroup service.
   * @module api/SupplierUserGroupApi
   * @version 1.0.89
   */

  /**
   * Constructs a new SupplierUserGroupApi. 
   * @alias module:api/SupplierUserGroupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createV1supplierssupplierIDusergroups operation.
     * @callback module:api/SupplierUserGroupApi~createV1supplierssupplierIDusergroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {module:model/UserGroup} userGroup 
     * @param {module:api/SupplierUserGroupApi~createV1supplierssupplierIDusergroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.createV1supplierssupplierIDusergroups = function(supplierID, userGroup, callback) {
      var postBody = userGroup;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling createV1supplierssupplierIDusergroups");
      }

      // verify the required parameter 'userGroup' is set
      if (userGroup === undefined || userGroup === null) {
        throw new Error("Missing the required parameter 'userGroup' when calling createV1supplierssupplierIDusergroups");
      }


      var pathParams = {
        'supplierID': supplierID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroup;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserID operation.
     * @callback module:api/SupplierUserGroupApi~deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userGroupID ID of the user group.
     * @param {String} userID ID of the user.
     * @param {module:api/SupplierUserGroupApi~deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserID = function(supplierID, userGroupID, userID, callback) {
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserID");
      }

      // verify the required parameter 'userGroupID' is set
      if (userGroupID === undefined || userGroupID === null) {
        throw new Error("Missing the required parameter 'userGroupID' when calling deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserID");
      }

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteUserAssignmentV1supplierssupplierIDusergroupsuserGroupIDassignmentsuserID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userGroupID': userGroupID,
        'userID': userID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/{userGroupID}/assignments/{userID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1supplierssupplierIDusergroupsuserGroupID operation.
     * @callback module:api/SupplierUserGroupApi~deleteV1supplierssupplierIDusergroupsuserGroupIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userGroupID ID of the user group.
     * @param {module:api/SupplierUserGroupApi~deleteV1supplierssupplierIDusergroupsuserGroupIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteV1supplierssupplierIDusergroupsuserGroupID = function(supplierID, userGroupID, callback) {
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling deleteV1supplierssupplierIDusergroupsuserGroupID");
      }

      // verify the required parameter 'userGroupID' is set
      if (userGroupID === undefined || userGroupID === null) {
        throw new Error("Missing the required parameter 'userGroupID' when calling deleteV1supplierssupplierIDusergroupsuserGroupID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userGroupID': userGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/{userGroupID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1supplierssupplierIDusergroupsuserGroupID operation.
     * @callback module:api/SupplierUserGroupApi~getV1supplierssupplierIDusergroupsuserGroupIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userGroupID ID of the user group.
     * @param {module:api/SupplierUserGroupApi~getV1supplierssupplierIDusergroupsuserGroupIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.getV1supplierssupplierIDusergroupsuserGroupID = function(supplierID, userGroupID, callback) {
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling getV1supplierssupplierIDusergroupsuserGroupID");
      }

      // verify the required parameter 'userGroupID' is set
      if (userGroupID === undefined || userGroupID === null) {
        throw new Error("Missing the required parameter 'userGroupID' when calling getV1supplierssupplierIDusergroupsuserGroupID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userGroupID': userGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserGroup;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/{userGroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserAssignmentsV1supplierssupplierIDusergroupsassignments operation.
     * @callback module:api/SupplierUserGroupApi~listUserAssignmentsV1supplierssupplierIDusergroupsassignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.userID ID of the user.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/SupplierUserGroupApi~listUserAssignmentsV1supplierssupplierIDusergroupsassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserGroupAssignment}
     */
    this.listUserAssignmentsV1supplierssupplierIDusergroupsassignments = function(supplierID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling listUserAssignmentsV1supplierssupplierIDusergroupsassignments");
      }


      var pathParams = {
        'supplierID': supplierID
      };
      var queryParams = {
        'userGroupID': opts['userGroupID'],
        'userID': opts['userID'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListUserGroupAssignment;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listV1supplierssupplierIDusergroups operation.
     * @callback module:api/SupplierUserGroupApi~listV1supplierssupplierIDusergroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/SupplierUserGroupApi~listV1supplierssupplierIDusergroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserGroup}
     */
    this.listV1supplierssupplierIDusergroups = function(supplierID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling listV1supplierssupplierIDusergroups");
      }


      var pathParams = {
        'supplierID': supplierID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListUserGroup;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchV1supplierssupplierIDusergroupsuserGroupID operation.
     * @callback module:api/SupplierUserGroupApi~patchV1supplierssupplierIDusergroupsuserGroupIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userGroupID ID of the user group.
     * @param {module:model/UserGroup} userGroup 
     * @param {module:api/SupplierUserGroupApi~patchV1supplierssupplierIDusergroupsuserGroupIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.patchV1supplierssupplierIDusergroupsuserGroupID = function(supplierID, userGroupID, userGroup, callback) {
      var postBody = userGroup;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling patchV1supplierssupplierIDusergroupsuserGroupID");
      }

      // verify the required parameter 'userGroupID' is set
      if (userGroupID === undefined || userGroupID === null) {
        throw new Error("Missing the required parameter 'userGroupID' when calling patchV1supplierssupplierIDusergroupsuserGroupID");
      }

      // verify the required parameter 'userGroup' is set
      if (userGroup === undefined || userGroup === null) {
        throw new Error("Missing the required parameter 'userGroup' when calling patchV1supplierssupplierIDusergroupsuserGroupID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userGroupID': userGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroup;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/{userGroupID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUserAssignmentV1supplierssupplierIDusergroupsassignments operation.
     * @callback module:api/SupplierUserGroupApi~saveUserAssignmentV1supplierssupplierIDusergroupsassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {module:model/UserGroupAssignment} userGroupAssignment 
     * @param {module:api/SupplierUserGroupApi~saveUserAssignmentV1supplierssupplierIDusergroupsassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveUserAssignmentV1supplierssupplierIDusergroupsassignments = function(supplierID, userGroupAssignment, callback) {
      var postBody = userGroupAssignment;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling saveUserAssignmentV1supplierssupplierIDusergroupsassignments");
      }

      // verify the required parameter 'userGroupAssignment' is set
      if (userGroupAssignment === undefined || userGroupAssignment === null) {
        throw new Error("Missing the required parameter 'userGroupAssignment' when calling saveUserAssignmentV1supplierssupplierIDusergroupsassignments");
      }


      var pathParams = {
        'supplierID': supplierID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveV1supplierssupplierIDusergroupsuserGroupID operation.
     * @callback module:api/SupplierUserGroupApi~saveV1supplierssupplierIDusergroupsuserGroupIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} supplierID ID of the supplier.
     * @param {String} userGroupID ID of the user group.
     * @param {module:model/UserGroup} userGroup 
     * @param {module:api/SupplierUserGroupApi~saveV1supplierssupplierIDusergroupsuserGroupIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.saveV1supplierssupplierIDusergroupsuserGroupID = function(supplierID, userGroupID, userGroup, callback) {
      var postBody = userGroup;

      // verify the required parameter 'supplierID' is set
      if (supplierID === undefined || supplierID === null) {
        throw new Error("Missing the required parameter 'supplierID' when calling saveV1supplierssupplierIDusergroupsuserGroupID");
      }

      // verify the required parameter 'userGroupID' is set
      if (userGroupID === undefined || userGroupID === null) {
        throw new Error("Missing the required parameter 'userGroupID' when calling saveV1supplierssupplierIDusergroupsuserGroupID");
      }

      // verify the required parameter 'userGroup' is set
      if (userGroup === undefined || userGroup === null) {
        throw new Error("Missing the required parameter 'userGroup' when calling saveV1supplierssupplierIDusergroupsuserGroupID");
      }


      var pathParams = {
        'supplierID': supplierID,
        'userGroupID': userGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroup;

      return this.apiClient.callApi(
        '/suppliers/{supplierID}/usergroups/{userGroupID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
