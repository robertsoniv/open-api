/**
 * OrderCloud
 * OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.
 *
 * OpenAPI spec version: 1.0.89
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Category', 'model/CategoryAssignment', 'model/CategoryProductAssignment', 'model/ListCategory', 'model/ListCategoryAssignment', 'model/ListCategoryProductAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Category'), require('../model/CategoryAssignment'), require('../model/CategoryProductAssignment'), require('../model/ListCategory'), require('../model/ListCategoryAssignment'), require('../model/ListCategoryProductAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.CategoryApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Category, root.OrderCloud.CategoryAssignment, root.OrderCloud.CategoryProductAssignment, root.OrderCloud.ListCategory, root.OrderCloud.ListCategoryAssignment, root.OrderCloud.ListCategoryProductAssignment);
  }
}(this, function(ApiClient, Category, CategoryAssignment, CategoryProductAssignment, ListCategory, ListCategoryAssignment, ListCategoryProductAssignment) {
  'use strict';

  /**
   * Category service.
   * @module api/CategoryApi
   * @version 1.0.89
   */

  /**
   * Constructs a new CategoryApi. 
   * @alias module:api/CategoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createV1catalogscatalogIDcategories operation.
     * @callback module:api/CategoryApi~createV1catalogscatalogIDcategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {module:model/Category} category 
     * @param {module:api/CategoryApi~createV1catalogscatalogIDcategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.createV1catalogscatalogIDcategories = function(catalogID, category, callback) {
      var postBody = category;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling createV1catalogscatalogIDcategories");
      }

      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling createV1catalogscatalogIDcategories");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignments operation.
     * @callback module:api/CategoryApi~deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {String} categoryID ID of the category.
     * @param {String} buyerID ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {module:api/CategoryApi~deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignments = function(catalogID, categoryID, buyerID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignments");
      }

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignments");
      }

      // verify the required parameter 'buyerID' is set
      if (buyerID === undefined || buyerID === null) {
        throw new Error("Missing the required parameter 'buyerID' when calling deleteAssignmentV1catalogscatalogIDcategoriescategoryIDassignments");
      }


      var pathParams = {
        'catalogID': catalogID,
        'categoryID': categoryID
      };
      var queryParams = {
        'buyerID': buyerID,
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/{categoryID}/assignments', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductID operation.
     * @callback module:api/CategoryApi~deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {String} categoryID ID of the category.
     * @param {String} productID ID of the product.
     * @param {module:api/CategoryApi~deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductID = function(catalogID, categoryID, productID, callback) {
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductID");
      }

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductID");
      }

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProductAssignmentV1catalogscatalogIDcategoriescategoryIDproductassignmentsproductID");
      }


      var pathParams = {
        'catalogID': catalogID,
        'categoryID': categoryID,
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/{categoryID}/productassignments/{productID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1catalogscatalogIDcategoriescategoryID operation.
     * @callback module:api/CategoryApi~deleteV1catalogscatalogIDcategoriescategoryIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {String} categoryID ID of the category.
     * @param {module:api/CategoryApi~deleteV1catalogscatalogIDcategoriescategoryIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteV1catalogscatalogIDcategoriescategoryID = function(catalogID, categoryID, callback) {
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling deleteV1catalogscatalogIDcategoriescategoryID");
      }

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling deleteV1catalogscatalogIDcategoriescategoryID");
      }


      var pathParams = {
        'catalogID': catalogID,
        'categoryID': categoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/{categoryID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1catalogscatalogIDcategoriescategoryID operation.
     * @callback module:api/CategoryApi~getV1catalogscatalogIDcategoriescategoryIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {String} categoryID ID of the category.
     * @param {module:api/CategoryApi~getV1catalogscatalogIDcategoriescategoryIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.getV1catalogscatalogIDcategoriescategoryID = function(catalogID, categoryID, callback) {
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling getV1catalogscatalogIDcategoriescategoryID");
      }

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling getV1catalogscatalogIDcategoriescategoryID");
      }


      var pathParams = {
        'catalogID': catalogID,
        'categoryID': categoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/{categoryID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignmentsV1catalogscatalogIDcategoriesassignments operation.
     * @callback module:api/CategoryApi~listAssignmentsV1catalogscatalogIDcategoriesassignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCategoryAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {Object} opts Optional parameters
     * @param {String} opts.categoryID ID of the category.
     * @param {String} opts.buyerID ID of the buyer.
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.level Level of the category assignment. Possible values: User, Group, Company.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/CategoryApi~listAssignmentsV1catalogscatalogIDcategoriesassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCategoryAssignment}
     */
    this.listAssignmentsV1catalogscatalogIDcategoriesassignments = function(catalogID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling listAssignmentsV1catalogscatalogIDcategoriesassignments");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
        'categoryID': opts['categoryID'],
        'buyerID': opts['buyerID'],
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
        'level': opts['level'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCategoryAssignment;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductAssignmentsV1catalogscatalogIDcategoriesproductassignments operation.
     * @callback module:api/CategoryApi~listProductAssignmentsV1catalogscatalogIDcategoriesproductassignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCategoryProductAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {Object} opts Optional parameters
     * @param {String} opts.categoryID ID of the category.
     * @param {String} opts.productID ID of the product.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/CategoryApi~listProductAssignmentsV1catalogscatalogIDcategoriesproductassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCategoryProductAssignment}
     */
    this.listProductAssignmentsV1catalogscatalogIDcategoriesproductassignments = function(catalogID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling listProductAssignmentsV1catalogscatalogIDcategoriesproductassignments");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
        'categoryID': opts['categoryID'],
        'productID': opts['productID'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCategoryProductAssignment;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/productassignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listV1catalogscatalogIDcategories operation.
     * @callback module:api/CategoryApi~listV1catalogscatalogIDcategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {Object} opts Optional parameters
     * @param {String} opts.depth Depth of the category.
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Number} opts.page Page of results to return. Default: 1
     * @param {Number} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {Object} opts.filters Any additional key/value pairs passed in the query string are interpretted as filters. Valid keys are top-level properties of the returned model or &#39;xp.???&#39;
     * @param {module:api/CategoryApi~listV1catalogscatalogIDcategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCategory}
     */
    this.listV1catalogscatalogIDcategories = function(catalogID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling listV1catalogscatalogIDcategories");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
        'depth': opts['depth'],
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListCategory;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchV1catalogscatalogIDcategoriescategoryID operation.
     * @callback module:api/CategoryApi~patchV1catalogscatalogIDcategoriescategoryIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {String} categoryID ID of the category.
     * @param {module:model/Category} category 
     * @param {module:api/CategoryApi~patchV1catalogscatalogIDcategoriescategoryIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.patchV1catalogscatalogIDcategoriescategoryID = function(catalogID, categoryID, category, callback) {
      var postBody = category;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling patchV1catalogscatalogIDcategoriescategoryID");
      }

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling patchV1catalogscatalogIDcategoriescategoryID");
      }

      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling patchV1catalogscatalogIDcategoriescategoryID");
      }


      var pathParams = {
        'catalogID': catalogID,
        'categoryID': categoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/{categoryID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssignmentV1catalogscatalogIDcategoriesassignments operation.
     * @callback module:api/CategoryApi~saveAssignmentV1catalogscatalogIDcategoriesassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {module:model/CategoryAssignment} categoryAssignment 
     * @param {module:api/CategoryApi~saveAssignmentV1catalogscatalogIDcategoriesassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAssignmentV1catalogscatalogIDcategoriesassignments = function(catalogID, categoryAssignment, callback) {
      var postBody = categoryAssignment;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling saveAssignmentV1catalogscatalogIDcategoriesassignments");
      }

      // verify the required parameter 'categoryAssignment' is set
      if (categoryAssignment === undefined || categoryAssignment === null) {
        throw new Error("Missing the required parameter 'categoryAssignment' when calling saveAssignmentV1catalogscatalogIDcategoriesassignments");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProductAssignmentV1catalogscatalogIDcategoriesproductassignments operation.
     * @callback module:api/CategoryApi~saveProductAssignmentV1catalogscatalogIDcategoriesproductassignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {module:model/CategoryProductAssignment} categoryProductAssignment 
     * @param {module:api/CategoryApi~saveProductAssignmentV1catalogscatalogIDcategoriesproductassignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveProductAssignmentV1catalogscatalogIDcategoriesproductassignments = function(catalogID, categoryProductAssignment, callback) {
      var postBody = categoryProductAssignment;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling saveProductAssignmentV1catalogscatalogIDcategoriesproductassignments");
      }

      // verify the required parameter 'categoryProductAssignment' is set
      if (categoryProductAssignment === undefined || categoryProductAssignment === null) {
        throw new Error("Missing the required parameter 'categoryProductAssignment' when calling saveProductAssignmentV1catalogscatalogIDcategoriesproductassignments");
      }


      var pathParams = {
        'catalogID': catalogID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/productassignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveV1catalogscatalogIDcategoriescategoryID operation.
     * @callback module:api/CategoryApi~saveV1catalogscatalogIDcategoriescategoryIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} catalogID ID of the catalog.
     * @param {String} categoryID ID of the category.
     * @param {module:model/Category} category 
     * @param {module:api/CategoryApi~saveV1catalogscatalogIDcategoriescategoryIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.saveV1catalogscatalogIDcategoriescategoryID = function(catalogID, categoryID, category, callback) {
      var postBody = category;

      // verify the required parameter 'catalogID' is set
      if (catalogID === undefined || catalogID === null) {
        throw new Error("Missing the required parameter 'catalogID' when calling saveV1catalogscatalogIDcategoriescategoryID");
      }

      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling saveV1catalogscatalogIDcategoriescategoryID");
      }

      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling saveV1catalogscatalogIDcategoriescategoryID");
      }


      var pathParams = {
        'catalogID': catalogID,
        'categoryID': categoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/catalogs/{catalogID}/categories/{categoryID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
